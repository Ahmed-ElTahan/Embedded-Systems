
43_TIMER0_FastPWM_OuputPWM_Signal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000736  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000008c4  00000000  00000000  0000078c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000776  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <main>
  64:	0c 94 99 03 	jmp	0x732	; 0x732 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SetPinDirection>:
*/
#include"DDIO.h" // This header file includes the appropriate IO definitions for the device that has been specified by the -MCU= compiler command-line switch.

// Function (1):  to set the pin number (0 to 31) direction as Input(floating)/Output/Input(pull up)
void SetPinDirection(u8 PinNumber, u8 PinDirection)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <SetPinDirection+0x6>
  72:	0f 92       	push	r0
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	8a 83       	std	Y+2, r24	; 0x02
  7a:	6b 83       	std	Y+3, r22	; 0x03
	u8 PortLetter = PinNumber/NUM; // to get the Port letter (0 for A, 1 for B, 2 for C, 3 for D)
  7c:	8a 81       	ldd	r24, Y+2	; 0x02
  7e:	86 95       	lsr	r24
  80:	86 95       	lsr	r24
  82:	86 95       	lsr	r24
  84:	89 83       	std	Y+1, r24	; 0x01
	// PinNumber%NUM gives the number of the pin in the port from 0 to 7

	// 0 for port A
		if (PortLetter == PortA_Letter)
  86:	89 81       	ldd	r24, Y+1	; 0x01
  88:	88 23       	and	r24, r24
  8a:	09 f0       	breq	.+2      	; 0x8e <SetPinDirection+0x22>
  8c:	66 c0       	rjmp	.+204    	; 0x15a <SetPinDirection+0xee>
		{
			//DDRA
			if (PinDirection == INPUT) // Input (floating)
  8e:	8b 81       	ldd	r24, Y+3	; 0x03
  90:	88 23       	and	r24, r24
  92:	c1 f4       	brne	.+48     	; 0xc4 <SetPinDirection+0x58>
			{
				CLR_BIT(DDRA, PinNumber%NUM);
  94:	aa e3       	ldi	r26, 0x3A	; 58
  96:	b0 e0       	ldi	r27, 0x00	; 0
  98:	ea e3       	ldi	r30, 0x3A	; 58
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	48 2f       	mov	r20, r24
  a0:	8a 81       	ldd	r24, Y+2	; 0x02
  a2:	88 2f       	mov	r24, r24
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	9c 01       	movw	r18, r24
  a8:	27 70       	andi	r18, 0x07	; 7
  aa:	30 70       	andi	r19, 0x00	; 0
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 2e       	mov	r0, r18
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <SetPinDirection+0x4c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <SetPinDirection+0x48>
  bc:	80 95       	com	r24
  be:	84 23       	and	r24, r20
  c0:	8c 93       	st	X, r24
  c2:	87 c1       	rjmp	.+782    	; 0x3d2 <SetPinDirection+0x366>
			}
			else if (PinDirection == OUTPUT) // Output
  c4:	8b 81       	ldd	r24, Y+3	; 0x03
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	b9 f4       	brne	.+46     	; 0xf8 <SetPinDirection+0x8c>
			{
				SET_BIT(DDRA, PinNumber%NUM);
  ca:	aa e3       	ldi	r26, 0x3A	; 58
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	ea e3       	ldi	r30, 0x3A	; 58
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	48 2f       	mov	r20, r24
  d6:	8a 81       	ldd	r24, Y+2	; 0x02
  d8:	88 2f       	mov	r24, r24
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	9c 01       	movw	r18, r24
  de:	27 70       	andi	r18, 0x07	; 7
  e0:	30 70       	andi	r19, 0x00	; 0
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 2e       	mov	r0, r18
  e8:	02 c0       	rjmp	.+4      	; 0xee <SetPinDirection+0x82>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	0a 94       	dec	r0
  f0:	e2 f7       	brpl	.-8      	; 0xea <SetPinDirection+0x7e>
  f2:	84 2b       	or	r24, r20
  f4:	8c 93       	st	X, r24
  f6:	6d c1       	rjmp	.+730    	; 0x3d2 <SetPinDirection+0x366>
			}
			else if (PinDirection == INPUT_PU)
  f8:	8b 81       	ldd	r24, Y+3	; 0x03
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	09 f0       	breq	.+2      	; 0x100 <SetPinDirection+0x94>
  fe:	69 c1       	rjmp	.+722    	; 0x3d2 <SetPinDirection+0x366>
			{
				CLR_BIT(DDRA, PinNumber%NUM); // define as input
 100:	aa e3       	ldi	r26, 0x3A	; 58
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	ea e3       	ldi	r30, 0x3A	; 58
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	48 2f       	mov	r20, r24
 10c:	8a 81       	ldd	r24, Y+2	; 0x02
 10e:	88 2f       	mov	r24, r24
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	9c 01       	movw	r18, r24
 114:	27 70       	andi	r18, 0x07	; 7
 116:	30 70       	andi	r19, 0x00	; 0
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <SetPinDirection+0xb6>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	2a 95       	dec	r18
 124:	e2 f7       	brpl	.-8      	; 0x11e <SetPinDirection+0xb2>
 126:	80 95       	com	r24
 128:	84 23       	and	r24, r20
 12a:	8c 93       	st	X, r24
				SET_BIT(PORTA, PinNumber%NUM); // write high to be Input (pull up)
 12c:	ab e3       	ldi	r26, 0x3B	; 59
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	eb e3       	ldi	r30, 0x3B	; 59
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	48 2f       	mov	r20, r24
 138:	8a 81       	ldd	r24, Y+2	; 0x02
 13a:	88 2f       	mov	r24, r24
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	9c 01       	movw	r18, r24
 140:	27 70       	andi	r18, 0x07	; 7
 142:	30 70       	andi	r19, 0x00	; 0
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 2e       	mov	r0, r18
 14a:	02 c0       	rjmp	.+4      	; 0x150 <SetPinDirection+0xe4>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	0a 94       	dec	r0
 152:	e2 f7       	brpl	.-8      	; 0x14c <SetPinDirection+0xe0>
 154:	84 2b       	or	r24, r20
 156:	8c 93       	st	X, r24
 158:	3c c1       	rjmp	.+632    	; 0x3d2 <SetPinDirection+0x366>
			}
		}

	// 1 for port B
		else if (PortLetter == PortB_Letter)
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	09 f0       	breq	.+2      	; 0x162 <SetPinDirection+0xf6>
 160:	66 c0       	rjmp	.+204    	; 0x22e <SetPinDirection+0x1c2>
		{
			//DDRB
			if (PinDirection == INPUT) // Input (floating)
 162:	8b 81       	ldd	r24, Y+3	; 0x03
 164:	88 23       	and	r24, r24
 166:	c1 f4       	brne	.+48     	; 0x198 <SetPinDirection+0x12c>
			{
				CLR_BIT(DDRB, PinNumber%NUM);
 168:	a7 e3       	ldi	r26, 0x37	; 55
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	e7 e3       	ldi	r30, 0x37	; 55
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	48 2f       	mov	r20, r24
 174:	8a 81       	ldd	r24, Y+2	; 0x02
 176:	88 2f       	mov	r24, r24
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	9c 01       	movw	r18, r24
 17c:	27 70       	andi	r18, 0x07	; 7
 17e:	30 70       	andi	r19, 0x00	; 0
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 2e       	mov	r0, r18
 186:	02 c0       	rjmp	.+4      	; 0x18c <SetPinDirection+0x120>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	0a 94       	dec	r0
 18e:	e2 f7       	brpl	.-8      	; 0x188 <SetPinDirection+0x11c>
 190:	80 95       	com	r24
 192:	84 23       	and	r24, r20
 194:	8c 93       	st	X, r24
 196:	1d c1       	rjmp	.+570    	; 0x3d2 <SetPinDirection+0x366>
			}
			else if (PinDirection == OUTPUT) // Output
 198:	8b 81       	ldd	r24, Y+3	; 0x03
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	b9 f4       	brne	.+46     	; 0x1cc <SetPinDirection+0x160>
			{
				SET_BIT(DDRB, PinNumber%NUM);
 19e:	a7 e3       	ldi	r26, 0x37	; 55
 1a0:	b0 e0       	ldi	r27, 0x00	; 0
 1a2:	e7 e3       	ldi	r30, 0x37	; 55
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	48 2f       	mov	r20, r24
 1aa:	8a 81       	ldd	r24, Y+2	; 0x02
 1ac:	88 2f       	mov	r24, r24
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	9c 01       	movw	r18, r24
 1b2:	27 70       	andi	r18, 0x07	; 7
 1b4:	30 70       	andi	r19, 0x00	; 0
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 2e       	mov	r0, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <SetPinDirection+0x156>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <SetPinDirection+0x152>
 1c6:	84 2b       	or	r24, r20
 1c8:	8c 93       	st	X, r24
 1ca:	03 c1       	rjmp	.+518    	; 0x3d2 <SetPinDirection+0x366>
			}
			else if (PinDirection == INPUT_PU)
 1cc:	8b 81       	ldd	r24, Y+3	; 0x03
 1ce:	82 30       	cpi	r24, 0x02	; 2
 1d0:	09 f0       	breq	.+2      	; 0x1d4 <SetPinDirection+0x168>
 1d2:	ff c0       	rjmp	.+510    	; 0x3d2 <SetPinDirection+0x366>
			{
				CLR_BIT(DDRB, PinNumber%NUM); // define as input
 1d4:	a7 e3       	ldi	r26, 0x37	; 55
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	e7 e3       	ldi	r30, 0x37	; 55
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	48 2f       	mov	r20, r24
 1e0:	8a 81       	ldd	r24, Y+2	; 0x02
 1e2:	88 2f       	mov	r24, r24
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	9c 01       	movw	r18, r24
 1e8:	27 70       	andi	r18, 0x07	; 7
 1ea:	30 70       	andi	r19, 0x00	; 0
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <SetPinDirection+0x18a>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	2a 95       	dec	r18
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <SetPinDirection+0x186>
 1fa:	80 95       	com	r24
 1fc:	84 23       	and	r24, r20
 1fe:	8c 93       	st	X, r24
				SET_BIT(PORTB, PinNumber%NUM); // write high to be Input (pull up)
 200:	a8 e3       	ldi	r26, 0x38	; 56
 202:	b0 e0       	ldi	r27, 0x00	; 0
 204:	e8 e3       	ldi	r30, 0x38	; 56
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	48 2f       	mov	r20, r24
 20c:	8a 81       	ldd	r24, Y+2	; 0x02
 20e:	88 2f       	mov	r24, r24
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	9c 01       	movw	r18, r24
 214:	27 70       	andi	r18, 0x07	; 7
 216:	30 70       	andi	r19, 0x00	; 0
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 2e       	mov	r0, r18
 21e:	02 c0       	rjmp	.+4      	; 0x224 <SetPinDirection+0x1b8>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	0a 94       	dec	r0
 226:	e2 f7       	brpl	.-8      	; 0x220 <SetPinDirection+0x1b4>
 228:	84 2b       	or	r24, r20
 22a:	8c 93       	st	X, r24
 22c:	d2 c0       	rjmp	.+420    	; 0x3d2 <SetPinDirection+0x366>
			}
		}

	// 2 for port C
		else if (PortLetter == PortC_Letter)
 22e:	89 81       	ldd	r24, Y+1	; 0x01
 230:	82 30       	cpi	r24, 0x02	; 2
 232:	09 f0       	breq	.+2      	; 0x236 <SetPinDirection+0x1ca>
 234:	66 c0       	rjmp	.+204    	; 0x302 <SetPinDirection+0x296>
		{
			//DDRC
			if (PinDirection == INPUT) // Input (floating)
 236:	8b 81       	ldd	r24, Y+3	; 0x03
 238:	88 23       	and	r24, r24
 23a:	c1 f4       	brne	.+48     	; 0x26c <SetPinDirection+0x200>
			{
				CLR_BIT(DDRC, PinNumber%NUM);
 23c:	a4 e3       	ldi	r26, 0x34	; 52
 23e:	b0 e0       	ldi	r27, 0x00	; 0
 240:	e4 e3       	ldi	r30, 0x34	; 52
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	48 2f       	mov	r20, r24
 248:	8a 81       	ldd	r24, Y+2	; 0x02
 24a:	88 2f       	mov	r24, r24
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	9c 01       	movw	r18, r24
 250:	27 70       	andi	r18, 0x07	; 7
 252:	30 70       	andi	r19, 0x00	; 0
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 2e       	mov	r0, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <SetPinDirection+0x1f4>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	0a 94       	dec	r0
 262:	e2 f7       	brpl	.-8      	; 0x25c <SetPinDirection+0x1f0>
 264:	80 95       	com	r24
 266:	84 23       	and	r24, r20
 268:	8c 93       	st	X, r24
 26a:	b3 c0       	rjmp	.+358    	; 0x3d2 <SetPinDirection+0x366>
			}
			else if (PinDirection == OUTPUT) // Output
 26c:	8b 81       	ldd	r24, Y+3	; 0x03
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	b9 f4       	brne	.+46     	; 0x2a0 <SetPinDirection+0x234>
			{
				SET_BIT(DDRC, PinNumber%NUM);
 272:	a4 e3       	ldi	r26, 0x34	; 52
 274:	b0 e0       	ldi	r27, 0x00	; 0
 276:	e4 e3       	ldi	r30, 0x34	; 52
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	48 2f       	mov	r20, r24
 27e:	8a 81       	ldd	r24, Y+2	; 0x02
 280:	88 2f       	mov	r24, r24
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	9c 01       	movw	r18, r24
 286:	27 70       	andi	r18, 0x07	; 7
 288:	30 70       	andi	r19, 0x00	; 0
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 2e       	mov	r0, r18
 290:	02 c0       	rjmp	.+4      	; 0x296 <SetPinDirection+0x22a>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	0a 94       	dec	r0
 298:	e2 f7       	brpl	.-8      	; 0x292 <SetPinDirection+0x226>
 29a:	84 2b       	or	r24, r20
 29c:	8c 93       	st	X, r24
 29e:	99 c0       	rjmp	.+306    	; 0x3d2 <SetPinDirection+0x366>
			}
			else if (PinDirection == INPUT_PU)
 2a0:	8b 81       	ldd	r24, Y+3	; 0x03
 2a2:	82 30       	cpi	r24, 0x02	; 2
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <SetPinDirection+0x23c>
 2a6:	95 c0       	rjmp	.+298    	; 0x3d2 <SetPinDirection+0x366>
			{
				CLR_BIT(DDRC, PinNumber%NUM); // define as input
 2a8:	a4 e3       	ldi	r26, 0x34	; 52
 2aa:	b0 e0       	ldi	r27, 0x00	; 0
 2ac:	e4 e3       	ldi	r30, 0x34	; 52
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	48 2f       	mov	r20, r24
 2b4:	8a 81       	ldd	r24, Y+2	; 0x02
 2b6:	88 2f       	mov	r24, r24
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	9c 01       	movw	r18, r24
 2bc:	27 70       	andi	r18, 0x07	; 7
 2be:	30 70       	andi	r19, 0x00	; 0
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <SetPinDirection+0x25e>
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	2a 95       	dec	r18
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <SetPinDirection+0x25a>
 2ce:	80 95       	com	r24
 2d0:	84 23       	and	r24, r20
 2d2:	8c 93       	st	X, r24
				SET_BIT(PORTC, PinNumber%NUM); // write high to be Input (pull up)
 2d4:	a5 e3       	ldi	r26, 0x35	; 53
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	e5 e3       	ldi	r30, 0x35	; 53
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	48 2f       	mov	r20, r24
 2e0:	8a 81       	ldd	r24, Y+2	; 0x02
 2e2:	88 2f       	mov	r24, r24
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	9c 01       	movw	r18, r24
 2e8:	27 70       	andi	r18, 0x07	; 7
 2ea:	30 70       	andi	r19, 0x00	; 0
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	02 2e       	mov	r0, r18
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <SetPinDirection+0x28c>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	0a 94       	dec	r0
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <SetPinDirection+0x288>
 2fc:	84 2b       	or	r24, r20
 2fe:	8c 93       	st	X, r24
 300:	68 c0       	rjmp	.+208    	; 0x3d2 <SetPinDirection+0x366>
			}
		}

	// 3 for port D
		else if (PortLetter == PortD_Letter)
 302:	89 81       	ldd	r24, Y+1	; 0x01
 304:	83 30       	cpi	r24, 0x03	; 3
 306:	09 f0       	breq	.+2      	; 0x30a <SetPinDirection+0x29e>
 308:	64 c0       	rjmp	.+200    	; 0x3d2 <SetPinDirection+0x366>
		{
			//DDRA
			if (PinDirection == INPUT) // Input (floating)
 30a:	8b 81       	ldd	r24, Y+3	; 0x03
 30c:	88 23       	and	r24, r24
 30e:	c1 f4       	brne	.+48     	; 0x340 <SetPinDirection+0x2d4>
			{
				CLR_BIT(DDRD, PinNumber%NUM);
 310:	a1 e3       	ldi	r26, 0x31	; 49
 312:	b0 e0       	ldi	r27, 0x00	; 0
 314:	e1 e3       	ldi	r30, 0x31	; 49
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	48 2f       	mov	r20, r24
 31c:	8a 81       	ldd	r24, Y+2	; 0x02
 31e:	88 2f       	mov	r24, r24
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	9c 01       	movw	r18, r24
 324:	27 70       	andi	r18, 0x07	; 7
 326:	30 70       	andi	r19, 0x00	; 0
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	02 2e       	mov	r0, r18
 32e:	02 c0       	rjmp	.+4      	; 0x334 <SetPinDirection+0x2c8>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <SetPinDirection+0x2c4>
 338:	80 95       	com	r24
 33a:	84 23       	and	r24, r20
 33c:	8c 93       	st	X, r24
 33e:	49 c0       	rjmp	.+146    	; 0x3d2 <SetPinDirection+0x366>
			}
			else if (PinDirection == OUTPUT) // Output
 340:	8b 81       	ldd	r24, Y+3	; 0x03
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	b9 f4       	brne	.+46     	; 0x374 <SetPinDirection+0x308>
			{
				SET_BIT(DDRD, PinNumber%NUM);
 346:	a1 e3       	ldi	r26, 0x31	; 49
 348:	b0 e0       	ldi	r27, 0x00	; 0
 34a:	e1 e3       	ldi	r30, 0x31	; 49
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	48 2f       	mov	r20, r24
 352:	8a 81       	ldd	r24, Y+2	; 0x02
 354:	88 2f       	mov	r24, r24
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	9c 01       	movw	r18, r24
 35a:	27 70       	andi	r18, 0x07	; 7
 35c:	30 70       	andi	r19, 0x00	; 0
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	02 2e       	mov	r0, r18
 364:	02 c0       	rjmp	.+4      	; 0x36a <SetPinDirection+0x2fe>
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	0a 94       	dec	r0
 36c:	e2 f7       	brpl	.-8      	; 0x366 <SetPinDirection+0x2fa>
 36e:	84 2b       	or	r24, r20
 370:	8c 93       	st	X, r24
 372:	2f c0       	rjmp	.+94     	; 0x3d2 <SetPinDirection+0x366>
			}
			else if (PinDirection == INPUT_PU)
 374:	8b 81       	ldd	r24, Y+3	; 0x03
 376:	82 30       	cpi	r24, 0x02	; 2
 378:	61 f5       	brne	.+88     	; 0x3d2 <SetPinDirection+0x366>
			{
				CLR_BIT(DDRD, PinNumber%NUM); // define as input
 37a:	a1 e3       	ldi	r26, 0x31	; 49
 37c:	b0 e0       	ldi	r27, 0x00	; 0
 37e:	e1 e3       	ldi	r30, 0x31	; 49
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	48 2f       	mov	r20, r24
 386:	8a 81       	ldd	r24, Y+2	; 0x02
 388:	88 2f       	mov	r24, r24
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	9c 01       	movw	r18, r24
 38e:	27 70       	andi	r18, 0x07	; 7
 390:	30 70       	andi	r19, 0x00	; 0
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <SetPinDirection+0x330>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	2a 95       	dec	r18
 39e:	e2 f7       	brpl	.-8      	; 0x398 <SetPinDirection+0x32c>
 3a0:	80 95       	com	r24
 3a2:	84 23       	and	r24, r20
 3a4:	8c 93       	st	X, r24
				SET_BIT(PORTD, PinNumber%NUM); // write high to be Input (pull up)
 3a6:	a2 e3       	ldi	r26, 0x32	; 50
 3a8:	b0 e0       	ldi	r27, 0x00	; 0
 3aa:	e2 e3       	ldi	r30, 0x32	; 50
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	48 2f       	mov	r20, r24
 3b2:	8a 81       	ldd	r24, Y+2	; 0x02
 3b4:	88 2f       	mov	r24, r24
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	9c 01       	movw	r18, r24
 3ba:	27 70       	andi	r18, 0x07	; 7
 3bc:	30 70       	andi	r19, 0x00	; 0
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 2e       	mov	r0, r18
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <SetPinDirection+0x35e>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	0a 94       	dec	r0
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <SetPinDirection+0x35a>
 3ce:	84 2b       	or	r24, r20
 3d0:	8c 93       	st	X, r24
			}
		}

}
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	0f 90       	pop	r0
 3d8:	cf 91       	pop	r28
 3da:	df 91       	pop	r29
 3dc:	08 95       	ret

000003de <SetPinValue>:

// Function (2): to set the output of the output pins (0-31)
void SetPinValue(u8 PinNumber, u8 PinValue)
{
 3de:	df 93       	push	r29
 3e0:	cf 93       	push	r28
 3e2:	00 d0       	rcall	.+0      	; 0x3e4 <SetPinValue+0x6>
 3e4:	0f 92       	push	r0
 3e6:	cd b7       	in	r28, 0x3d	; 61
 3e8:	de b7       	in	r29, 0x3e	; 62
 3ea:	8a 83       	std	Y+2, r24	; 0x02
 3ec:	6b 83       	std	Y+3, r22	; 0x03
	u8 PortLetter = PinNumber/NUM; // to get the Port letter (0 for A, 1 for B, 2 for C, 3 for D)
 3ee:	8a 81       	ldd	r24, Y+2	; 0x02
 3f0:	86 95       	lsr	r24
 3f2:	86 95       	lsr	r24
 3f4:	86 95       	lsr	r24
 3f6:	89 83       	std	Y+1, r24	; 0x01
	// PinNumber%NUM gives the number of the pin in the port from 0 to 7


	if (PortLetter == PortA_Letter) // 0 for port A
 3f8:	89 81       	ldd	r24, Y+1	; 0x01
 3fa:	88 23       	and	r24, r24
 3fc:	b1 f5       	brne	.+108    	; 0x46a <SetPinValue+0x8c>
	{
		//PORTA
		if (PinValue == LOW) // Low
 3fe:	8b 81       	ldd	r24, Y+3	; 0x03
 400:	88 23       	and	r24, r24
 402:	c1 f4       	brne	.+48     	; 0x434 <SetPinValue+0x56>
		{
			CLR_BIT(PORTA, PinNumber%NUM);
 404:	ab e3       	ldi	r26, 0x3B	; 59
 406:	b0 e0       	ldi	r27, 0x00	; 0
 408:	eb e3       	ldi	r30, 0x3B	; 59
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	48 2f       	mov	r20, r24
 410:	8a 81       	ldd	r24, Y+2	; 0x02
 412:	88 2f       	mov	r24, r24
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	9c 01       	movw	r18, r24
 418:	27 70       	andi	r18, 0x07	; 7
 41a:	30 70       	andi	r19, 0x00	; 0
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	02 2e       	mov	r0, r18
 422:	02 c0       	rjmp	.+4      	; 0x428 <SetPinValue+0x4a>
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	0a 94       	dec	r0
 42a:	e2 f7       	brpl	.-8      	; 0x424 <SetPinValue+0x46>
 42c:	80 95       	com	r24
 42e:	84 23       	and	r24, r20
 430:	8c 93       	st	X, r24
 432:	c4 c0       	rjmp	.+392    	; 0x5bc <SetPinValue+0x1de>
		}
		else if (PinValue == HIGH) // High
 434:	8b 81       	ldd	r24, Y+3	; 0x03
 436:	81 30       	cpi	r24, 0x01	; 1
 438:	09 f0       	breq	.+2      	; 0x43c <SetPinValue+0x5e>
 43a:	c0 c0       	rjmp	.+384    	; 0x5bc <SetPinValue+0x1de>
		{
			SET_BIT(PORTA, PinNumber%NUM);
 43c:	ab e3       	ldi	r26, 0x3B	; 59
 43e:	b0 e0       	ldi	r27, 0x00	; 0
 440:	eb e3       	ldi	r30, 0x3B	; 59
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	48 2f       	mov	r20, r24
 448:	8a 81       	ldd	r24, Y+2	; 0x02
 44a:	88 2f       	mov	r24, r24
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	9c 01       	movw	r18, r24
 450:	27 70       	andi	r18, 0x07	; 7
 452:	30 70       	andi	r19, 0x00	; 0
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	02 2e       	mov	r0, r18
 45a:	02 c0       	rjmp	.+4      	; 0x460 <SetPinValue+0x82>
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	0a 94       	dec	r0
 462:	e2 f7       	brpl	.-8      	; 0x45c <SetPinValue+0x7e>
 464:	84 2b       	or	r24, r20
 466:	8c 93       	st	X, r24
 468:	a9 c0       	rjmp	.+338    	; 0x5bc <SetPinValue+0x1de>
		}
	}

	else if (PortLetter == PortB_Letter) // 1 for port B
 46a:	89 81       	ldd	r24, Y+1	; 0x01
 46c:	81 30       	cpi	r24, 0x01	; 1
 46e:	b1 f5       	brne	.+108    	; 0x4dc <SetPinValue+0xfe>
	{
		//PORTB
		if (PinValue == LOW) // Low
 470:	8b 81       	ldd	r24, Y+3	; 0x03
 472:	88 23       	and	r24, r24
 474:	c1 f4       	brne	.+48     	; 0x4a6 <SetPinValue+0xc8>
		{
			CLR_BIT(PORTB, PinNumber%NUM);
 476:	a8 e3       	ldi	r26, 0x38	; 56
 478:	b0 e0       	ldi	r27, 0x00	; 0
 47a:	e8 e3       	ldi	r30, 0x38	; 56
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	80 81       	ld	r24, Z
 480:	48 2f       	mov	r20, r24
 482:	8a 81       	ldd	r24, Y+2	; 0x02
 484:	88 2f       	mov	r24, r24
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	9c 01       	movw	r18, r24
 48a:	27 70       	andi	r18, 0x07	; 7
 48c:	30 70       	andi	r19, 0x00	; 0
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	02 2e       	mov	r0, r18
 494:	02 c0       	rjmp	.+4      	; 0x49a <SetPinValue+0xbc>
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	0a 94       	dec	r0
 49c:	e2 f7       	brpl	.-8      	; 0x496 <SetPinValue+0xb8>
 49e:	80 95       	com	r24
 4a0:	84 23       	and	r24, r20
 4a2:	8c 93       	st	X, r24
 4a4:	8b c0       	rjmp	.+278    	; 0x5bc <SetPinValue+0x1de>
		}
		else if (PinValue == HIGH) // High
 4a6:	8b 81       	ldd	r24, Y+3	; 0x03
 4a8:	81 30       	cpi	r24, 0x01	; 1
 4aa:	09 f0       	breq	.+2      	; 0x4ae <SetPinValue+0xd0>
 4ac:	87 c0       	rjmp	.+270    	; 0x5bc <SetPinValue+0x1de>
		{
			SET_BIT(PORTB, PinNumber%NUM);
 4ae:	a8 e3       	ldi	r26, 0x38	; 56
 4b0:	b0 e0       	ldi	r27, 0x00	; 0
 4b2:	e8 e3       	ldi	r30, 0x38	; 56
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	80 81       	ld	r24, Z
 4b8:	48 2f       	mov	r20, r24
 4ba:	8a 81       	ldd	r24, Y+2	; 0x02
 4bc:	88 2f       	mov	r24, r24
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	9c 01       	movw	r18, r24
 4c2:	27 70       	andi	r18, 0x07	; 7
 4c4:	30 70       	andi	r19, 0x00	; 0
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	02 2e       	mov	r0, r18
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <SetPinValue+0xf4>
 4ce:	88 0f       	add	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	0a 94       	dec	r0
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <SetPinValue+0xf0>
 4d6:	84 2b       	or	r24, r20
 4d8:	8c 93       	st	X, r24
 4da:	70 c0       	rjmp	.+224    	; 0x5bc <SetPinValue+0x1de>
		}
	}


	else if (PortLetter == PortC_Letter) // 2 for port C
 4dc:	89 81       	ldd	r24, Y+1	; 0x01
 4de:	82 30       	cpi	r24, 0x02	; 2
 4e0:	b1 f5       	brne	.+108    	; 0x54e <SetPinValue+0x170>
	{
		//PORTC
		if (PinValue == LOW) // Low
 4e2:	8b 81       	ldd	r24, Y+3	; 0x03
 4e4:	88 23       	and	r24, r24
 4e6:	c1 f4       	brne	.+48     	; 0x518 <SetPinValue+0x13a>
		{
			CLR_BIT(PORTC, PinNumber%NUM);
 4e8:	a5 e3       	ldi	r26, 0x35	; 53
 4ea:	b0 e0       	ldi	r27, 0x00	; 0
 4ec:	e5 e3       	ldi	r30, 0x35	; 53
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	80 81       	ld	r24, Z
 4f2:	48 2f       	mov	r20, r24
 4f4:	8a 81       	ldd	r24, Y+2	; 0x02
 4f6:	88 2f       	mov	r24, r24
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	9c 01       	movw	r18, r24
 4fc:	27 70       	andi	r18, 0x07	; 7
 4fe:	30 70       	andi	r19, 0x00	; 0
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	02 2e       	mov	r0, r18
 506:	02 c0       	rjmp	.+4      	; 0x50c <SetPinValue+0x12e>
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	0a 94       	dec	r0
 50e:	e2 f7       	brpl	.-8      	; 0x508 <SetPinValue+0x12a>
 510:	80 95       	com	r24
 512:	84 23       	and	r24, r20
 514:	8c 93       	st	X, r24
 516:	52 c0       	rjmp	.+164    	; 0x5bc <SetPinValue+0x1de>
		}
		else if (PinValue == HIGH) // High
 518:	8b 81       	ldd	r24, Y+3	; 0x03
 51a:	81 30       	cpi	r24, 0x01	; 1
 51c:	09 f0       	breq	.+2      	; 0x520 <SetPinValue+0x142>
 51e:	4e c0       	rjmp	.+156    	; 0x5bc <SetPinValue+0x1de>
		{
			SET_BIT(PORTC, PinNumber%NUM);
 520:	a5 e3       	ldi	r26, 0x35	; 53
 522:	b0 e0       	ldi	r27, 0x00	; 0
 524:	e5 e3       	ldi	r30, 0x35	; 53
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	80 81       	ld	r24, Z
 52a:	48 2f       	mov	r20, r24
 52c:	8a 81       	ldd	r24, Y+2	; 0x02
 52e:	88 2f       	mov	r24, r24
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	9c 01       	movw	r18, r24
 534:	27 70       	andi	r18, 0x07	; 7
 536:	30 70       	andi	r19, 0x00	; 0
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	02 2e       	mov	r0, r18
 53e:	02 c0       	rjmp	.+4      	; 0x544 <SetPinValue+0x166>
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	0a 94       	dec	r0
 546:	e2 f7       	brpl	.-8      	; 0x540 <SetPinValue+0x162>
 548:	84 2b       	or	r24, r20
 54a:	8c 93       	st	X, r24
 54c:	37 c0       	rjmp	.+110    	; 0x5bc <SetPinValue+0x1de>
		}
	}

	else if (PortLetter == PortD_Letter) // 3 for port D
 54e:	89 81       	ldd	r24, Y+1	; 0x01
 550:	83 30       	cpi	r24, 0x03	; 3
 552:	a1 f5       	brne	.+104    	; 0x5bc <SetPinValue+0x1de>
	{
		//PORTD
		if (PinValue == LOW) // Low
 554:	8b 81       	ldd	r24, Y+3	; 0x03
 556:	88 23       	and	r24, r24
 558:	c1 f4       	brne	.+48     	; 0x58a <SetPinValue+0x1ac>
		{
			CLR_BIT(PORTD, PinNumber%NUM);
 55a:	a2 e3       	ldi	r26, 0x32	; 50
 55c:	b0 e0       	ldi	r27, 0x00	; 0
 55e:	e2 e3       	ldi	r30, 0x32	; 50
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	80 81       	ld	r24, Z
 564:	48 2f       	mov	r20, r24
 566:	8a 81       	ldd	r24, Y+2	; 0x02
 568:	88 2f       	mov	r24, r24
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	9c 01       	movw	r18, r24
 56e:	27 70       	andi	r18, 0x07	; 7
 570:	30 70       	andi	r19, 0x00	; 0
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	02 2e       	mov	r0, r18
 578:	02 c0       	rjmp	.+4      	; 0x57e <SetPinValue+0x1a0>
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	0a 94       	dec	r0
 580:	e2 f7       	brpl	.-8      	; 0x57a <SetPinValue+0x19c>
 582:	80 95       	com	r24
 584:	84 23       	and	r24, r20
 586:	8c 93       	st	X, r24
 588:	19 c0       	rjmp	.+50     	; 0x5bc <SetPinValue+0x1de>
		}
		else if (PinValue == HIGH) // High
 58a:	8b 81       	ldd	r24, Y+3	; 0x03
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	b1 f4       	brne	.+44     	; 0x5bc <SetPinValue+0x1de>
		{
			SET_BIT(PORTD, PinNumber%NUM);
 590:	a2 e3       	ldi	r26, 0x32	; 50
 592:	b0 e0       	ldi	r27, 0x00	; 0
 594:	e2 e3       	ldi	r30, 0x32	; 50
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	80 81       	ld	r24, Z
 59a:	48 2f       	mov	r20, r24
 59c:	8a 81       	ldd	r24, Y+2	; 0x02
 59e:	88 2f       	mov	r24, r24
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	9c 01       	movw	r18, r24
 5a4:	27 70       	andi	r18, 0x07	; 7
 5a6:	30 70       	andi	r19, 0x00	; 0
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	02 2e       	mov	r0, r18
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <SetPinValue+0x1d6>
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	0a 94       	dec	r0
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <SetPinValue+0x1d2>
 5b8:	84 2b       	or	r24, r20
 5ba:	8c 93       	st	X, r24
		}
	}
}
 5bc:	0f 90       	pop	r0
 5be:	0f 90       	pop	r0
 5c0:	0f 90       	pop	r0
 5c2:	cf 91       	pop	r28
 5c4:	df 91       	pop	r29
 5c6:	08 95       	ret

000005c8 <GetPinValue>:



// Fucntion (3): to get the value of the input pin
u8 GetPinValue(u8 PinNumber) // return the value of pin 0 - 31
{
 5c8:	df 93       	push	r29
 5ca:	cf 93       	push	r28
 5cc:	00 d0       	rcall	.+0      	; 0x5ce <GetPinValue+0x6>
 5ce:	00 d0       	rcall	.+0      	; 0x5d0 <GetPinValue+0x8>
 5d0:	cd b7       	in	r28, 0x3d	; 61
 5d2:	de b7       	in	r29, 0x3e	; 62
 5d4:	8a 83       	std	Y+2, r24	; 0x02
	u8 PortLetter = PinNumber/NUM; // to get the Port letter (0 for A, 1 for B, 2 for C, 3 for D)
 5d6:	8a 81       	ldd	r24, Y+2	; 0x02
 5d8:	86 95       	lsr	r24
 5da:	86 95       	lsr	r24
 5dc:	86 95       	lsr	r24
 5de:	89 83       	std	Y+1, r24	; 0x01
	// PinNumber%NUM gives the number of the pin in the port from 0 to 7

	if (PortLetter == PortA_Letter) // 0 for port A
 5e0:	89 81       	ldd	r24, Y+1	; 0x01
 5e2:	88 23       	and	r24, r24
 5e4:	a9 f4       	brne	.+42     	; 0x610 <GetPinValue+0x48>
	{
		//PINA
		return GET_BIT(PINA, PinNumber%NUM);
 5e6:	e9 e3       	ldi	r30, 0x39	; 57
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	28 2f       	mov	r18, r24
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	8a 81       	ldd	r24, Y+2	; 0x02
 5f2:	88 2f       	mov	r24, r24
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	87 70       	andi	r24, 0x07	; 7
 5f8:	90 70       	andi	r25, 0x00	; 0
 5fa:	a9 01       	movw	r20, r18
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <GetPinValue+0x3a>
 5fe:	55 95       	asr	r21
 600:	47 95       	ror	r20
 602:	8a 95       	dec	r24
 604:	e2 f7       	brpl	.-8      	; 0x5fe <GetPinValue+0x36>
 606:	ca 01       	movw	r24, r20
 608:	58 2f       	mov	r21, r24
 60a:	51 70       	andi	r21, 0x01	; 1
 60c:	5b 83       	std	Y+3, r21	; 0x03
 60e:	49 c0       	rjmp	.+146    	; 0x6a2 <GetPinValue+0xda>
	}
	else if (PortLetter == PortB_Letter) // 1 for port B
 610:	89 81       	ldd	r24, Y+1	; 0x01
 612:	81 30       	cpi	r24, 0x01	; 1
 614:	a9 f4       	brne	.+42     	; 0x640 <GetPinValue+0x78>
	{
		//PINB
		return GET_BIT(PINB, PinNumber%NUM);
 616:	e6 e3       	ldi	r30, 0x36	; 54
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	28 2f       	mov	r18, r24
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	8a 81       	ldd	r24, Y+2	; 0x02
 622:	88 2f       	mov	r24, r24
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	87 70       	andi	r24, 0x07	; 7
 628:	90 70       	andi	r25, 0x00	; 0
 62a:	a9 01       	movw	r20, r18
 62c:	02 c0       	rjmp	.+4      	; 0x632 <GetPinValue+0x6a>
 62e:	55 95       	asr	r21
 630:	47 95       	ror	r20
 632:	8a 95       	dec	r24
 634:	e2 f7       	brpl	.-8      	; 0x62e <GetPinValue+0x66>
 636:	ca 01       	movw	r24, r20
 638:	58 2f       	mov	r21, r24
 63a:	51 70       	andi	r21, 0x01	; 1
 63c:	5b 83       	std	Y+3, r21	; 0x03
 63e:	31 c0       	rjmp	.+98     	; 0x6a2 <GetPinValue+0xda>
	}

	else if (PortLetter == PortC_Letter) // 2 for port C
 640:	89 81       	ldd	r24, Y+1	; 0x01
 642:	82 30       	cpi	r24, 0x02	; 2
 644:	a9 f4       	brne	.+42     	; 0x670 <GetPinValue+0xa8>
	{
		//PINC
		return GET_BIT(PINC, PinNumber%NUM);
 646:	e3 e3       	ldi	r30, 0x33	; 51
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	80 81       	ld	r24, Z
 64c:	28 2f       	mov	r18, r24
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	8a 81       	ldd	r24, Y+2	; 0x02
 652:	88 2f       	mov	r24, r24
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	87 70       	andi	r24, 0x07	; 7
 658:	90 70       	andi	r25, 0x00	; 0
 65a:	a9 01       	movw	r20, r18
 65c:	02 c0       	rjmp	.+4      	; 0x662 <GetPinValue+0x9a>
 65e:	55 95       	asr	r21
 660:	47 95       	ror	r20
 662:	8a 95       	dec	r24
 664:	e2 f7       	brpl	.-8      	; 0x65e <GetPinValue+0x96>
 666:	ca 01       	movw	r24, r20
 668:	58 2f       	mov	r21, r24
 66a:	51 70       	andi	r21, 0x01	; 1
 66c:	5b 83       	std	Y+3, r21	; 0x03
 66e:	19 c0       	rjmp	.+50     	; 0x6a2 <GetPinValue+0xda>
	}

	else if (PortLetter == PortD_Letter) // 3 for port D
 670:	89 81       	ldd	r24, Y+1	; 0x01
 672:	83 30       	cpi	r24, 0x03	; 3
 674:	a9 f4       	brne	.+42     	; 0x6a0 <GetPinValue+0xd8>
	{
		//PIND
		return GET_BIT(PIND, PinNumber%NUM);
 676:	e0 e3       	ldi	r30, 0x30	; 48
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	80 81       	ld	r24, Z
 67c:	28 2f       	mov	r18, r24
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	8a 81       	ldd	r24, Y+2	; 0x02
 682:	88 2f       	mov	r24, r24
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	87 70       	andi	r24, 0x07	; 7
 688:	90 70       	andi	r25, 0x00	; 0
 68a:	a9 01       	movw	r20, r18
 68c:	02 c0       	rjmp	.+4      	; 0x692 <GetPinValue+0xca>
 68e:	55 95       	asr	r21
 690:	47 95       	ror	r20
 692:	8a 95       	dec	r24
 694:	e2 f7       	brpl	.-8      	; 0x68e <GetPinValue+0xc6>
 696:	ca 01       	movw	r24, r20
 698:	58 2f       	mov	r21, r24
 69a:	51 70       	andi	r21, 0x01	; 1
 69c:	5b 83       	std	Y+3, r21	; 0x03
 69e:	01 c0       	rjmp	.+2      	; 0x6a2 <GetPinValue+0xda>
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <GetPinValue+0xde>
	}
}
 6a2:	8b 81       	ldd	r24, Y+3	; 0x03
 6a4:	8c 83       	std	Y+4, r24	; 0x04
 6a6:	8c 81       	ldd	r24, Y+4	; 0x04
 6a8:	0f 90       	pop	r0
 6aa:	0f 90       	pop	r0
 6ac:	0f 90       	pop	r0
 6ae:	0f 90       	pop	r0
 6b0:	cf 91       	pop	r28
 6b2:	df 91       	pop	r29
 6b4:	08 95       	ret

000006b6 <main>:
// Global variables (Declaration and Initialization)
// Enum


void main(void)
{
 6b6:	df 93       	push	r29
 6b8:	cf 93       	push	r28
 6ba:	cd b7       	in	r28, 0x3d	; 61
 6bc:	de b7       	in	r29, 0x3e	; 62

	// Declaration and Initialization (executed once)
	SetPinDirection(OC0PWM_Pin, OUTPUT); // define OC0 Pin (PWM) pin as output
 6be:	8b e0       	ldi	r24, 0x0B	; 11
 6c0:	61 e0       	ldi	r22, 0x01	; 1
 6c2:	0e 94 36 00 	call	0x6c	; 0x6c <SetPinDirection>

	// program variables

	// Module Initialization
		// Timers Initialization (Fast PWM, 64 prescaler, OC0 pin high till output compare match, low till overflow)
			SET_BIT(TCCR0, WGM00); // Fast PWM wave generation mode
 6c6:	a3 e5       	ldi	r26, 0x53	; 83
 6c8:	b0 e0       	ldi	r27, 0x00	; 0
 6ca:	e3 e5       	ldi	r30, 0x53	; 83
 6cc:	f0 e0       	ldi	r31, 0x00	; 0
 6ce:	80 81       	ld	r24, Z
 6d0:	80 64       	ori	r24, 0x40	; 64
 6d2:	8c 93       	st	X, r24
			SET_BIT(TCCR0, WGM01); // Fast PWM wave generation mode
 6d4:	a3 e5       	ldi	r26, 0x53	; 83
 6d6:	b0 e0       	ldi	r27, 0x00	; 0
 6d8:	e3 e5       	ldi	r30, 0x53	; 83
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	80 81       	ld	r24, Z
 6de:	88 60       	ori	r24, 0x08	; 8
 6e0:	8c 93       	st	X, r24
			SET_BIT(TCCR0, COM01); // Clear OC0 on compare match, set OC0 at BOTTOM
 6e2:	a3 e5       	ldi	r26, 0x53	; 83
 6e4:	b0 e0       	ldi	r27, 0x00	; 0
 6e6:	e3 e5       	ldi	r30, 0x53	; 83
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	80 81       	ld	r24, Z
 6ec:	80 62       	ori	r24, 0x20	; 32
 6ee:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM00); // Clear OC0 on compare match, set OC0 at BOTTOM
 6f0:	a3 e5       	ldi	r26, 0x53	; 83
 6f2:	b0 e0       	ldi	r27, 0x00	; 0
 6f4:	e3 e5       	ldi	r30, 0x53	; 83
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	80 81       	ld	r24, Z
 6fa:	8f 7e       	andi	r24, 0xEF	; 239
 6fc:	8c 93       	st	X, r24

			CLR_BIT(TCCR0, CS02); SET_BIT(TCCR0, CS01); SET_BIT(TCCR0, CS00); // Start the timer. prescaler 64
 6fe:	a3 e5       	ldi	r26, 0x53	; 83
 700:	b0 e0       	ldi	r27, 0x00	; 0
 702:	e3 e5       	ldi	r30, 0x53	; 83
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	80 81       	ld	r24, Z
 708:	8b 7f       	andi	r24, 0xFB	; 251
 70a:	8c 93       	st	X, r24
 70c:	a3 e5       	ldi	r26, 0x53	; 83
 70e:	b0 e0       	ldi	r27, 0x00	; 0
 710:	e3 e5       	ldi	r30, 0x53	; 83
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	80 81       	ld	r24, Z
 716:	82 60       	ori	r24, 0x02	; 2
 718:	8c 93       	st	X, r24
 71a:	a3 e5       	ldi	r26, 0x53	; 83
 71c:	b0 e0       	ldi	r27, 0x00	; 0
 71e:	e3 e5       	ldi	r30, 0x53	; 83
 720:	f0 e0       	ldi	r31, 0x00	; 0
 722:	80 81       	ld	r24, Z
 724:	81 60       	ori	r24, 0x01	; 1
 726:	8c 93       	st	X, r24

			OCR0 = 219; // T_on = 1.75 ms
 728:	ec e5       	ldi	r30, 0x5C	; 92
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	8b ed       	ldi	r24, 0xDB	; 219
 72e:	80 83       	st	Z, r24
 730:	ff cf       	rjmp	.-2      	; 0x730 <main+0x7a>

00000732 <_exit>:
 732:	f8 94       	cli

00000734 <__stop_program>:
 734:	ff cf       	rjmp	.-2      	; 0x734 <__stop_program>
