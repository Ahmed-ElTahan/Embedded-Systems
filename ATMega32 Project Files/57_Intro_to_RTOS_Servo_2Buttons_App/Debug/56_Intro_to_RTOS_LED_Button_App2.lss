
56_Intro_to_RTOS_LED_Button_App2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000924  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000924  000009b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800070  00800070  000009c8  2**0
                  ALLOC
  3 .stab         00000ae0  00000000  00000000  000009c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000970  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 28 04 	call	0x850	; 0x850 <main>
  8a:	0c 94 90 04 	jmp	0x920	; 0x920 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SetPinDirection>:
*/
#include"DDIO.h" // This header file includes the appropriate IO definitions for the device that has been specified by the -MCU= compiler command-line switch.

// Function (1):  to set the pin number (0 to 31) direction as Input(floating)/Output/Input(pull up)
void SetPinDirection(u8 PinNumber, u8 PinDirection)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <SetPinDirection+0x6>
  98:	0f 92       	push	r0
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	8a 83       	std	Y+2, r24	; 0x02
  a0:	6b 83       	std	Y+3, r22	; 0x03
	u8 PortLetter = PinNumber/NUM; // to get the Port letter (0 for A, 1 for B, 2 for C, 3 for D)
  a2:	8a 81       	ldd	r24, Y+2	; 0x02
  a4:	86 95       	lsr	r24
  a6:	86 95       	lsr	r24
  a8:	86 95       	lsr	r24
  aa:	89 83       	std	Y+1, r24	; 0x01
	// PinNumber%NUM gives the number of the pin in the port from 0 to 7

	// 0 for port A
		if (PortLetter == PortA_Letter)
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	88 23       	and	r24, r24
  b0:	09 f0       	breq	.+2      	; 0xb4 <SetPinDirection+0x22>
  b2:	66 c0       	rjmp	.+204    	; 0x180 <SetPinDirection+0xee>
		{
			//DDRA
			if (PinDirection == INPUT) // Input (floating)
  b4:	8b 81       	ldd	r24, Y+3	; 0x03
  b6:	88 23       	and	r24, r24
  b8:	c1 f4       	brne	.+48     	; 0xea <SetPinDirection+0x58>
			{
				CLR_BIT(DDRA, PinNumber%NUM);
  ba:	aa e3       	ldi	r26, 0x3A	; 58
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	ea e3       	ldi	r30, 0x3A	; 58
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	48 2f       	mov	r20, r24
  c6:	8a 81       	ldd	r24, Y+2	; 0x02
  c8:	88 2f       	mov	r24, r24
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	9c 01       	movw	r18, r24
  ce:	27 70       	andi	r18, 0x07	; 7
  d0:	30 70       	andi	r19, 0x00	; 0
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 2e       	mov	r0, r18
  d8:	02 c0       	rjmp	.+4      	; 0xde <SetPinDirection+0x4c>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <SetPinDirection+0x48>
  e2:	80 95       	com	r24
  e4:	84 23       	and	r24, r20
  e6:	8c 93       	st	X, r24
  e8:	87 c1       	rjmp	.+782    	; 0x3f8 <SetPinDirection+0x366>
			}
			else if (PinDirection == OUTPUT) // Output
  ea:	8b 81       	ldd	r24, Y+3	; 0x03
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	b9 f4       	brne	.+46     	; 0x11e <SetPinDirection+0x8c>
			{
				SET_BIT(DDRA, PinNumber%NUM);
  f0:	aa e3       	ldi	r26, 0x3A	; 58
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	ea e3       	ldi	r30, 0x3A	; 58
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	48 2f       	mov	r20, r24
  fc:	8a 81       	ldd	r24, Y+2	; 0x02
  fe:	88 2f       	mov	r24, r24
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	9c 01       	movw	r18, r24
 104:	27 70       	andi	r18, 0x07	; 7
 106:	30 70       	andi	r19, 0x00	; 0
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 2e       	mov	r0, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <SetPinDirection+0x82>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <SetPinDirection+0x7e>
 118:	84 2b       	or	r24, r20
 11a:	8c 93       	st	X, r24
 11c:	6d c1       	rjmp	.+730    	; 0x3f8 <SetPinDirection+0x366>
			}
			else if (PinDirection == INPUT_PU)
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	09 f0       	breq	.+2      	; 0x126 <SetPinDirection+0x94>
 124:	69 c1       	rjmp	.+722    	; 0x3f8 <SetPinDirection+0x366>
			{
				CLR_BIT(DDRA, PinNumber%NUM); // define as input
 126:	aa e3       	ldi	r26, 0x3A	; 58
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	ea e3       	ldi	r30, 0x3A	; 58
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	48 2f       	mov	r20, r24
 132:	8a 81       	ldd	r24, Y+2	; 0x02
 134:	88 2f       	mov	r24, r24
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	9c 01       	movw	r18, r24
 13a:	27 70       	andi	r18, 0x07	; 7
 13c:	30 70       	andi	r19, 0x00	; 0
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <SetPinDirection+0xb6>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	2a 95       	dec	r18
 14a:	e2 f7       	brpl	.-8      	; 0x144 <SetPinDirection+0xb2>
 14c:	80 95       	com	r24
 14e:	84 23       	and	r24, r20
 150:	8c 93       	st	X, r24
				SET_BIT(PORTA, PinNumber%NUM); // write high to be Input (pull up)
 152:	ab e3       	ldi	r26, 0x3B	; 59
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	eb e3       	ldi	r30, 0x3B	; 59
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	48 2f       	mov	r20, r24
 15e:	8a 81       	ldd	r24, Y+2	; 0x02
 160:	88 2f       	mov	r24, r24
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	9c 01       	movw	r18, r24
 166:	27 70       	andi	r18, 0x07	; 7
 168:	30 70       	andi	r19, 0x00	; 0
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 2e       	mov	r0, r18
 170:	02 c0       	rjmp	.+4      	; 0x176 <SetPinDirection+0xe4>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	0a 94       	dec	r0
 178:	e2 f7       	brpl	.-8      	; 0x172 <SetPinDirection+0xe0>
 17a:	84 2b       	or	r24, r20
 17c:	8c 93       	st	X, r24
 17e:	3c c1       	rjmp	.+632    	; 0x3f8 <SetPinDirection+0x366>
			}
		}

	// 1 for port B
		else if (PortLetter == PortB_Letter)
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	09 f0       	breq	.+2      	; 0x188 <SetPinDirection+0xf6>
 186:	66 c0       	rjmp	.+204    	; 0x254 <SetPinDirection+0x1c2>
		{
			//DDRB
			if (PinDirection == INPUT) // Input (floating)
 188:	8b 81       	ldd	r24, Y+3	; 0x03
 18a:	88 23       	and	r24, r24
 18c:	c1 f4       	brne	.+48     	; 0x1be <SetPinDirection+0x12c>
			{
				CLR_BIT(DDRB, PinNumber%NUM);
 18e:	a7 e3       	ldi	r26, 0x37	; 55
 190:	b0 e0       	ldi	r27, 0x00	; 0
 192:	e7 e3       	ldi	r30, 0x37	; 55
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	48 2f       	mov	r20, r24
 19a:	8a 81       	ldd	r24, Y+2	; 0x02
 19c:	88 2f       	mov	r24, r24
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	9c 01       	movw	r18, r24
 1a2:	27 70       	andi	r18, 0x07	; 7
 1a4:	30 70       	andi	r19, 0x00	; 0
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 2e       	mov	r0, r18
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <SetPinDirection+0x120>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	0a 94       	dec	r0
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <SetPinDirection+0x11c>
 1b6:	80 95       	com	r24
 1b8:	84 23       	and	r24, r20
 1ba:	8c 93       	st	X, r24
 1bc:	1d c1       	rjmp	.+570    	; 0x3f8 <SetPinDirection+0x366>
			}
			else if (PinDirection == OUTPUT) // Output
 1be:	8b 81       	ldd	r24, Y+3	; 0x03
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	b9 f4       	brne	.+46     	; 0x1f2 <SetPinDirection+0x160>
			{
				SET_BIT(DDRB, PinNumber%NUM);
 1c4:	a7 e3       	ldi	r26, 0x37	; 55
 1c6:	b0 e0       	ldi	r27, 0x00	; 0
 1c8:	e7 e3       	ldi	r30, 0x37	; 55
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	48 2f       	mov	r20, r24
 1d0:	8a 81       	ldd	r24, Y+2	; 0x02
 1d2:	88 2f       	mov	r24, r24
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	9c 01       	movw	r18, r24
 1d8:	27 70       	andi	r18, 0x07	; 7
 1da:	30 70       	andi	r19, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 2e       	mov	r0, r18
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <SetPinDirection+0x156>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	0a 94       	dec	r0
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <SetPinDirection+0x152>
 1ec:	84 2b       	or	r24, r20
 1ee:	8c 93       	st	X, r24
 1f0:	03 c1       	rjmp	.+518    	; 0x3f8 <SetPinDirection+0x366>
			}
			else if (PinDirection == INPUT_PU)
 1f2:	8b 81       	ldd	r24, Y+3	; 0x03
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	09 f0       	breq	.+2      	; 0x1fa <SetPinDirection+0x168>
 1f8:	ff c0       	rjmp	.+510    	; 0x3f8 <SetPinDirection+0x366>
			{
				CLR_BIT(DDRB, PinNumber%NUM); // define as input
 1fa:	a7 e3       	ldi	r26, 0x37	; 55
 1fc:	b0 e0       	ldi	r27, 0x00	; 0
 1fe:	e7 e3       	ldi	r30, 0x37	; 55
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	48 2f       	mov	r20, r24
 206:	8a 81       	ldd	r24, Y+2	; 0x02
 208:	88 2f       	mov	r24, r24
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	9c 01       	movw	r18, r24
 20e:	27 70       	andi	r18, 0x07	; 7
 210:	30 70       	andi	r19, 0x00	; 0
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <SetPinDirection+0x18a>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	2a 95       	dec	r18
 21e:	e2 f7       	brpl	.-8      	; 0x218 <SetPinDirection+0x186>
 220:	80 95       	com	r24
 222:	84 23       	and	r24, r20
 224:	8c 93       	st	X, r24
				SET_BIT(PORTB, PinNumber%NUM); // write high to be Input (pull up)
 226:	a8 e3       	ldi	r26, 0x38	; 56
 228:	b0 e0       	ldi	r27, 0x00	; 0
 22a:	e8 e3       	ldi	r30, 0x38	; 56
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	48 2f       	mov	r20, r24
 232:	8a 81       	ldd	r24, Y+2	; 0x02
 234:	88 2f       	mov	r24, r24
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	9c 01       	movw	r18, r24
 23a:	27 70       	andi	r18, 0x07	; 7
 23c:	30 70       	andi	r19, 0x00	; 0
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 2e       	mov	r0, r18
 244:	02 c0       	rjmp	.+4      	; 0x24a <SetPinDirection+0x1b8>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	0a 94       	dec	r0
 24c:	e2 f7       	brpl	.-8      	; 0x246 <SetPinDirection+0x1b4>
 24e:	84 2b       	or	r24, r20
 250:	8c 93       	st	X, r24
 252:	d2 c0       	rjmp	.+420    	; 0x3f8 <SetPinDirection+0x366>
			}
		}

	// 2 for port C
		else if (PortLetter == PortC_Letter)
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	82 30       	cpi	r24, 0x02	; 2
 258:	09 f0       	breq	.+2      	; 0x25c <SetPinDirection+0x1ca>
 25a:	66 c0       	rjmp	.+204    	; 0x328 <SetPinDirection+0x296>
		{
			//DDRC
			if (PinDirection == INPUT) // Input (floating)
 25c:	8b 81       	ldd	r24, Y+3	; 0x03
 25e:	88 23       	and	r24, r24
 260:	c1 f4       	brne	.+48     	; 0x292 <SetPinDirection+0x200>
			{
				CLR_BIT(DDRC, PinNumber%NUM);
 262:	a4 e3       	ldi	r26, 0x34	; 52
 264:	b0 e0       	ldi	r27, 0x00	; 0
 266:	e4 e3       	ldi	r30, 0x34	; 52
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	48 2f       	mov	r20, r24
 26e:	8a 81       	ldd	r24, Y+2	; 0x02
 270:	88 2f       	mov	r24, r24
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	9c 01       	movw	r18, r24
 276:	27 70       	andi	r18, 0x07	; 7
 278:	30 70       	andi	r19, 0x00	; 0
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 2e       	mov	r0, r18
 280:	02 c0       	rjmp	.+4      	; 0x286 <SetPinDirection+0x1f4>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	0a 94       	dec	r0
 288:	e2 f7       	brpl	.-8      	; 0x282 <SetPinDirection+0x1f0>
 28a:	80 95       	com	r24
 28c:	84 23       	and	r24, r20
 28e:	8c 93       	st	X, r24
 290:	b3 c0       	rjmp	.+358    	; 0x3f8 <SetPinDirection+0x366>
			}
			else if (PinDirection == OUTPUT) // Output
 292:	8b 81       	ldd	r24, Y+3	; 0x03
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	b9 f4       	brne	.+46     	; 0x2c6 <SetPinDirection+0x234>
			{
				SET_BIT(DDRC, PinNumber%NUM);
 298:	a4 e3       	ldi	r26, 0x34	; 52
 29a:	b0 e0       	ldi	r27, 0x00	; 0
 29c:	e4 e3       	ldi	r30, 0x34	; 52
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	48 2f       	mov	r20, r24
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	88 2f       	mov	r24, r24
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	9c 01       	movw	r18, r24
 2ac:	27 70       	andi	r18, 0x07	; 7
 2ae:	30 70       	andi	r19, 0x00	; 0
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 2e       	mov	r0, r18
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <SetPinDirection+0x22a>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	0a 94       	dec	r0
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <SetPinDirection+0x226>
 2c0:	84 2b       	or	r24, r20
 2c2:	8c 93       	st	X, r24
 2c4:	99 c0       	rjmp	.+306    	; 0x3f8 <SetPinDirection+0x366>
			}
			else if (PinDirection == INPUT_PU)
 2c6:	8b 81       	ldd	r24, Y+3	; 0x03
 2c8:	82 30       	cpi	r24, 0x02	; 2
 2ca:	09 f0       	breq	.+2      	; 0x2ce <SetPinDirection+0x23c>
 2cc:	95 c0       	rjmp	.+298    	; 0x3f8 <SetPinDirection+0x366>
			{
				CLR_BIT(DDRC, PinNumber%NUM); // define as input
 2ce:	a4 e3       	ldi	r26, 0x34	; 52
 2d0:	b0 e0       	ldi	r27, 0x00	; 0
 2d2:	e4 e3       	ldi	r30, 0x34	; 52
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	48 2f       	mov	r20, r24
 2da:	8a 81       	ldd	r24, Y+2	; 0x02
 2dc:	88 2f       	mov	r24, r24
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	9c 01       	movw	r18, r24
 2e2:	27 70       	andi	r18, 0x07	; 7
 2e4:	30 70       	andi	r19, 0x00	; 0
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <SetPinDirection+0x25e>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	2a 95       	dec	r18
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <SetPinDirection+0x25a>
 2f4:	80 95       	com	r24
 2f6:	84 23       	and	r24, r20
 2f8:	8c 93       	st	X, r24
				SET_BIT(PORTC, PinNumber%NUM); // write high to be Input (pull up)
 2fa:	a5 e3       	ldi	r26, 0x35	; 53
 2fc:	b0 e0       	ldi	r27, 0x00	; 0
 2fe:	e5 e3       	ldi	r30, 0x35	; 53
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 81       	ld	r24, Z
 304:	48 2f       	mov	r20, r24
 306:	8a 81       	ldd	r24, Y+2	; 0x02
 308:	88 2f       	mov	r24, r24
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	9c 01       	movw	r18, r24
 30e:	27 70       	andi	r18, 0x07	; 7
 310:	30 70       	andi	r19, 0x00	; 0
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 2e       	mov	r0, r18
 318:	02 c0       	rjmp	.+4      	; 0x31e <SetPinDirection+0x28c>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	0a 94       	dec	r0
 320:	e2 f7       	brpl	.-8      	; 0x31a <SetPinDirection+0x288>
 322:	84 2b       	or	r24, r20
 324:	8c 93       	st	X, r24
 326:	68 c0       	rjmp	.+208    	; 0x3f8 <SetPinDirection+0x366>
			}
		}

	// 3 for port D
		else if (PortLetter == PortD_Letter)
 328:	89 81       	ldd	r24, Y+1	; 0x01
 32a:	83 30       	cpi	r24, 0x03	; 3
 32c:	09 f0       	breq	.+2      	; 0x330 <SetPinDirection+0x29e>
 32e:	64 c0       	rjmp	.+200    	; 0x3f8 <SetPinDirection+0x366>
		{
			//DDRA
			if (PinDirection == INPUT) // Input (floating)
 330:	8b 81       	ldd	r24, Y+3	; 0x03
 332:	88 23       	and	r24, r24
 334:	c1 f4       	brne	.+48     	; 0x366 <SetPinDirection+0x2d4>
			{
				CLR_BIT(DDRD, PinNumber%NUM);
 336:	a1 e3       	ldi	r26, 0x31	; 49
 338:	b0 e0       	ldi	r27, 0x00	; 0
 33a:	e1 e3       	ldi	r30, 0x31	; 49
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	48 2f       	mov	r20, r24
 342:	8a 81       	ldd	r24, Y+2	; 0x02
 344:	88 2f       	mov	r24, r24
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	9c 01       	movw	r18, r24
 34a:	27 70       	andi	r18, 0x07	; 7
 34c:	30 70       	andi	r19, 0x00	; 0
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 2e       	mov	r0, r18
 354:	02 c0       	rjmp	.+4      	; 0x35a <SetPinDirection+0x2c8>
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	0a 94       	dec	r0
 35c:	e2 f7       	brpl	.-8      	; 0x356 <SetPinDirection+0x2c4>
 35e:	80 95       	com	r24
 360:	84 23       	and	r24, r20
 362:	8c 93       	st	X, r24
 364:	49 c0       	rjmp	.+146    	; 0x3f8 <SetPinDirection+0x366>
			}
			else if (PinDirection == OUTPUT) // Output
 366:	8b 81       	ldd	r24, Y+3	; 0x03
 368:	81 30       	cpi	r24, 0x01	; 1
 36a:	b9 f4       	brne	.+46     	; 0x39a <SetPinDirection+0x308>
			{
				SET_BIT(DDRD, PinNumber%NUM);
 36c:	a1 e3       	ldi	r26, 0x31	; 49
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	e1 e3       	ldi	r30, 0x31	; 49
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	48 2f       	mov	r20, r24
 378:	8a 81       	ldd	r24, Y+2	; 0x02
 37a:	88 2f       	mov	r24, r24
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	9c 01       	movw	r18, r24
 380:	27 70       	andi	r18, 0x07	; 7
 382:	30 70       	andi	r19, 0x00	; 0
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 2e       	mov	r0, r18
 38a:	02 c0       	rjmp	.+4      	; 0x390 <SetPinDirection+0x2fe>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	0a 94       	dec	r0
 392:	e2 f7       	brpl	.-8      	; 0x38c <SetPinDirection+0x2fa>
 394:	84 2b       	or	r24, r20
 396:	8c 93       	st	X, r24
 398:	2f c0       	rjmp	.+94     	; 0x3f8 <SetPinDirection+0x366>
			}
			else if (PinDirection == INPUT_PU)
 39a:	8b 81       	ldd	r24, Y+3	; 0x03
 39c:	82 30       	cpi	r24, 0x02	; 2
 39e:	61 f5       	brne	.+88     	; 0x3f8 <SetPinDirection+0x366>
			{
				CLR_BIT(DDRD, PinNumber%NUM); // define as input
 3a0:	a1 e3       	ldi	r26, 0x31	; 49
 3a2:	b0 e0       	ldi	r27, 0x00	; 0
 3a4:	e1 e3       	ldi	r30, 0x31	; 49
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	48 2f       	mov	r20, r24
 3ac:	8a 81       	ldd	r24, Y+2	; 0x02
 3ae:	88 2f       	mov	r24, r24
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	9c 01       	movw	r18, r24
 3b4:	27 70       	andi	r18, 0x07	; 7
 3b6:	30 70       	andi	r19, 0x00	; 0
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <SetPinDirection+0x330>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	2a 95       	dec	r18
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <SetPinDirection+0x32c>
 3c6:	80 95       	com	r24
 3c8:	84 23       	and	r24, r20
 3ca:	8c 93       	st	X, r24
				SET_BIT(PORTD, PinNumber%NUM); // write high to be Input (pull up)
 3cc:	a2 e3       	ldi	r26, 0x32	; 50
 3ce:	b0 e0       	ldi	r27, 0x00	; 0
 3d0:	e2 e3       	ldi	r30, 0x32	; 50
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	80 81       	ld	r24, Z
 3d6:	48 2f       	mov	r20, r24
 3d8:	8a 81       	ldd	r24, Y+2	; 0x02
 3da:	88 2f       	mov	r24, r24
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	9c 01       	movw	r18, r24
 3e0:	27 70       	andi	r18, 0x07	; 7
 3e2:	30 70       	andi	r19, 0x00	; 0
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	02 2e       	mov	r0, r18
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <SetPinDirection+0x35e>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	0a 94       	dec	r0
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <SetPinDirection+0x35a>
 3f4:	84 2b       	or	r24, r20
 3f6:	8c 93       	st	X, r24
			}
		}

}
 3f8:	0f 90       	pop	r0
 3fa:	0f 90       	pop	r0
 3fc:	0f 90       	pop	r0
 3fe:	cf 91       	pop	r28
 400:	df 91       	pop	r29
 402:	08 95       	ret

00000404 <SetPinValue>:

// Function (2): to set the output of the output pins (0-31)
void SetPinValue(u8 PinNumber, u8 PinValue)
{
 404:	df 93       	push	r29
 406:	cf 93       	push	r28
 408:	00 d0       	rcall	.+0      	; 0x40a <SetPinValue+0x6>
 40a:	0f 92       	push	r0
 40c:	cd b7       	in	r28, 0x3d	; 61
 40e:	de b7       	in	r29, 0x3e	; 62
 410:	8a 83       	std	Y+2, r24	; 0x02
 412:	6b 83       	std	Y+3, r22	; 0x03
	u8 PortLetter = PinNumber/NUM; // to get the Port letter (0 for A, 1 for B, 2 for C, 3 for D)
 414:	8a 81       	ldd	r24, Y+2	; 0x02
 416:	86 95       	lsr	r24
 418:	86 95       	lsr	r24
 41a:	86 95       	lsr	r24
 41c:	89 83       	std	Y+1, r24	; 0x01
	// PinNumber%NUM gives the number of the pin in the port from 0 to 7


	if (PortLetter == PortA_Letter) // 0 for port A
 41e:	89 81       	ldd	r24, Y+1	; 0x01
 420:	88 23       	and	r24, r24
 422:	b1 f5       	brne	.+108    	; 0x490 <SetPinValue+0x8c>
	{
		//PORTA
		if (PinValue == LOW) // Low
 424:	8b 81       	ldd	r24, Y+3	; 0x03
 426:	88 23       	and	r24, r24
 428:	c1 f4       	brne	.+48     	; 0x45a <SetPinValue+0x56>
		{
			CLR_BIT(PORTA, PinNumber%NUM);
 42a:	ab e3       	ldi	r26, 0x3B	; 59
 42c:	b0 e0       	ldi	r27, 0x00	; 0
 42e:	eb e3       	ldi	r30, 0x3B	; 59
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	80 81       	ld	r24, Z
 434:	48 2f       	mov	r20, r24
 436:	8a 81       	ldd	r24, Y+2	; 0x02
 438:	88 2f       	mov	r24, r24
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	9c 01       	movw	r18, r24
 43e:	27 70       	andi	r18, 0x07	; 7
 440:	30 70       	andi	r19, 0x00	; 0
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 2e       	mov	r0, r18
 448:	02 c0       	rjmp	.+4      	; 0x44e <SetPinValue+0x4a>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	0a 94       	dec	r0
 450:	e2 f7       	brpl	.-8      	; 0x44a <SetPinValue+0x46>
 452:	80 95       	com	r24
 454:	84 23       	and	r24, r20
 456:	8c 93       	st	X, r24
 458:	c4 c0       	rjmp	.+392    	; 0x5e2 <SetPinValue+0x1de>
		}
		else if (PinValue == HIGH) // High
 45a:	8b 81       	ldd	r24, Y+3	; 0x03
 45c:	81 30       	cpi	r24, 0x01	; 1
 45e:	09 f0       	breq	.+2      	; 0x462 <SetPinValue+0x5e>
 460:	c0 c0       	rjmp	.+384    	; 0x5e2 <SetPinValue+0x1de>
		{
			SET_BIT(PORTA, PinNumber%NUM);
 462:	ab e3       	ldi	r26, 0x3B	; 59
 464:	b0 e0       	ldi	r27, 0x00	; 0
 466:	eb e3       	ldi	r30, 0x3B	; 59
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	80 81       	ld	r24, Z
 46c:	48 2f       	mov	r20, r24
 46e:	8a 81       	ldd	r24, Y+2	; 0x02
 470:	88 2f       	mov	r24, r24
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	9c 01       	movw	r18, r24
 476:	27 70       	andi	r18, 0x07	; 7
 478:	30 70       	andi	r19, 0x00	; 0
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	02 2e       	mov	r0, r18
 480:	02 c0       	rjmp	.+4      	; 0x486 <SetPinValue+0x82>
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	0a 94       	dec	r0
 488:	e2 f7       	brpl	.-8      	; 0x482 <SetPinValue+0x7e>
 48a:	84 2b       	or	r24, r20
 48c:	8c 93       	st	X, r24
 48e:	a9 c0       	rjmp	.+338    	; 0x5e2 <SetPinValue+0x1de>
		}
	}

	else if (PortLetter == PortB_Letter) // 1 for port B
 490:	89 81       	ldd	r24, Y+1	; 0x01
 492:	81 30       	cpi	r24, 0x01	; 1
 494:	b1 f5       	brne	.+108    	; 0x502 <SetPinValue+0xfe>
	{
		//PORTB
		if (PinValue == LOW) // Low
 496:	8b 81       	ldd	r24, Y+3	; 0x03
 498:	88 23       	and	r24, r24
 49a:	c1 f4       	brne	.+48     	; 0x4cc <SetPinValue+0xc8>
		{
			CLR_BIT(PORTB, PinNumber%NUM);
 49c:	a8 e3       	ldi	r26, 0x38	; 56
 49e:	b0 e0       	ldi	r27, 0x00	; 0
 4a0:	e8 e3       	ldi	r30, 0x38	; 56
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	80 81       	ld	r24, Z
 4a6:	48 2f       	mov	r20, r24
 4a8:	8a 81       	ldd	r24, Y+2	; 0x02
 4aa:	88 2f       	mov	r24, r24
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	9c 01       	movw	r18, r24
 4b0:	27 70       	andi	r18, 0x07	; 7
 4b2:	30 70       	andi	r19, 0x00	; 0
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	02 2e       	mov	r0, r18
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <SetPinValue+0xbc>
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	0a 94       	dec	r0
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <SetPinValue+0xb8>
 4c4:	80 95       	com	r24
 4c6:	84 23       	and	r24, r20
 4c8:	8c 93       	st	X, r24
 4ca:	8b c0       	rjmp	.+278    	; 0x5e2 <SetPinValue+0x1de>
		}
		else if (PinValue == HIGH) // High
 4cc:	8b 81       	ldd	r24, Y+3	; 0x03
 4ce:	81 30       	cpi	r24, 0x01	; 1
 4d0:	09 f0       	breq	.+2      	; 0x4d4 <SetPinValue+0xd0>
 4d2:	87 c0       	rjmp	.+270    	; 0x5e2 <SetPinValue+0x1de>
		{
			SET_BIT(PORTB, PinNumber%NUM);
 4d4:	a8 e3       	ldi	r26, 0x38	; 56
 4d6:	b0 e0       	ldi	r27, 0x00	; 0
 4d8:	e8 e3       	ldi	r30, 0x38	; 56
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	48 2f       	mov	r20, r24
 4e0:	8a 81       	ldd	r24, Y+2	; 0x02
 4e2:	88 2f       	mov	r24, r24
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	9c 01       	movw	r18, r24
 4e8:	27 70       	andi	r18, 0x07	; 7
 4ea:	30 70       	andi	r19, 0x00	; 0
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 2e       	mov	r0, r18
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <SetPinValue+0xf4>
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	0a 94       	dec	r0
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <SetPinValue+0xf0>
 4fc:	84 2b       	or	r24, r20
 4fe:	8c 93       	st	X, r24
 500:	70 c0       	rjmp	.+224    	; 0x5e2 <SetPinValue+0x1de>
		}
	}


	else if (PortLetter == PortC_Letter) // 2 for port C
 502:	89 81       	ldd	r24, Y+1	; 0x01
 504:	82 30       	cpi	r24, 0x02	; 2
 506:	b1 f5       	brne	.+108    	; 0x574 <SetPinValue+0x170>
	{
		//PORTC
		if (PinValue == LOW) // Low
 508:	8b 81       	ldd	r24, Y+3	; 0x03
 50a:	88 23       	and	r24, r24
 50c:	c1 f4       	brne	.+48     	; 0x53e <SetPinValue+0x13a>
		{
			CLR_BIT(PORTC, PinNumber%NUM);
 50e:	a5 e3       	ldi	r26, 0x35	; 53
 510:	b0 e0       	ldi	r27, 0x00	; 0
 512:	e5 e3       	ldi	r30, 0x35	; 53
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	80 81       	ld	r24, Z
 518:	48 2f       	mov	r20, r24
 51a:	8a 81       	ldd	r24, Y+2	; 0x02
 51c:	88 2f       	mov	r24, r24
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	9c 01       	movw	r18, r24
 522:	27 70       	andi	r18, 0x07	; 7
 524:	30 70       	andi	r19, 0x00	; 0
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	02 2e       	mov	r0, r18
 52c:	02 c0       	rjmp	.+4      	; 0x532 <SetPinValue+0x12e>
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	0a 94       	dec	r0
 534:	e2 f7       	brpl	.-8      	; 0x52e <SetPinValue+0x12a>
 536:	80 95       	com	r24
 538:	84 23       	and	r24, r20
 53a:	8c 93       	st	X, r24
 53c:	52 c0       	rjmp	.+164    	; 0x5e2 <SetPinValue+0x1de>
		}
		else if (PinValue == HIGH) // High
 53e:	8b 81       	ldd	r24, Y+3	; 0x03
 540:	81 30       	cpi	r24, 0x01	; 1
 542:	09 f0       	breq	.+2      	; 0x546 <SetPinValue+0x142>
 544:	4e c0       	rjmp	.+156    	; 0x5e2 <SetPinValue+0x1de>
		{
			SET_BIT(PORTC, PinNumber%NUM);
 546:	a5 e3       	ldi	r26, 0x35	; 53
 548:	b0 e0       	ldi	r27, 0x00	; 0
 54a:	e5 e3       	ldi	r30, 0x35	; 53
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	80 81       	ld	r24, Z
 550:	48 2f       	mov	r20, r24
 552:	8a 81       	ldd	r24, Y+2	; 0x02
 554:	88 2f       	mov	r24, r24
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	9c 01       	movw	r18, r24
 55a:	27 70       	andi	r18, 0x07	; 7
 55c:	30 70       	andi	r19, 0x00	; 0
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	02 2e       	mov	r0, r18
 564:	02 c0       	rjmp	.+4      	; 0x56a <SetPinValue+0x166>
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	0a 94       	dec	r0
 56c:	e2 f7       	brpl	.-8      	; 0x566 <SetPinValue+0x162>
 56e:	84 2b       	or	r24, r20
 570:	8c 93       	st	X, r24
 572:	37 c0       	rjmp	.+110    	; 0x5e2 <SetPinValue+0x1de>
		}
	}

	else if (PortLetter == PortD_Letter) // 3 for port D
 574:	89 81       	ldd	r24, Y+1	; 0x01
 576:	83 30       	cpi	r24, 0x03	; 3
 578:	a1 f5       	brne	.+104    	; 0x5e2 <SetPinValue+0x1de>
	{
		//PORTD
		if (PinValue == LOW) // Low
 57a:	8b 81       	ldd	r24, Y+3	; 0x03
 57c:	88 23       	and	r24, r24
 57e:	c1 f4       	brne	.+48     	; 0x5b0 <SetPinValue+0x1ac>
		{
			CLR_BIT(PORTD, PinNumber%NUM);
 580:	a2 e3       	ldi	r26, 0x32	; 50
 582:	b0 e0       	ldi	r27, 0x00	; 0
 584:	e2 e3       	ldi	r30, 0x32	; 50
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	80 81       	ld	r24, Z
 58a:	48 2f       	mov	r20, r24
 58c:	8a 81       	ldd	r24, Y+2	; 0x02
 58e:	88 2f       	mov	r24, r24
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	9c 01       	movw	r18, r24
 594:	27 70       	andi	r18, 0x07	; 7
 596:	30 70       	andi	r19, 0x00	; 0
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	02 2e       	mov	r0, r18
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <SetPinValue+0x1a0>
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	0a 94       	dec	r0
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <SetPinValue+0x19c>
 5a8:	80 95       	com	r24
 5aa:	84 23       	and	r24, r20
 5ac:	8c 93       	st	X, r24
 5ae:	19 c0       	rjmp	.+50     	; 0x5e2 <SetPinValue+0x1de>
		}
		else if (PinValue == HIGH) // High
 5b0:	8b 81       	ldd	r24, Y+3	; 0x03
 5b2:	81 30       	cpi	r24, 0x01	; 1
 5b4:	b1 f4       	brne	.+44     	; 0x5e2 <SetPinValue+0x1de>
		{
			SET_BIT(PORTD, PinNumber%NUM);
 5b6:	a2 e3       	ldi	r26, 0x32	; 50
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	e2 e3       	ldi	r30, 0x32	; 50
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	80 81       	ld	r24, Z
 5c0:	48 2f       	mov	r20, r24
 5c2:	8a 81       	ldd	r24, Y+2	; 0x02
 5c4:	88 2f       	mov	r24, r24
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	9c 01       	movw	r18, r24
 5ca:	27 70       	andi	r18, 0x07	; 7
 5cc:	30 70       	andi	r19, 0x00	; 0
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	02 2e       	mov	r0, r18
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <SetPinValue+0x1d6>
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	0a 94       	dec	r0
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <SetPinValue+0x1d2>
 5de:	84 2b       	or	r24, r20
 5e0:	8c 93       	st	X, r24
		}
	}
}
 5e2:	0f 90       	pop	r0
 5e4:	0f 90       	pop	r0
 5e6:	0f 90       	pop	r0
 5e8:	cf 91       	pop	r28
 5ea:	df 91       	pop	r29
 5ec:	08 95       	ret

000005ee <GetPinValue>:



// Fucntion (3): to get the value of the input pin
u8 GetPinValue(u8 PinNumber) // return the value of pin 0 - 31
{
 5ee:	df 93       	push	r29
 5f0:	cf 93       	push	r28
 5f2:	00 d0       	rcall	.+0      	; 0x5f4 <GetPinValue+0x6>
 5f4:	00 d0       	rcall	.+0      	; 0x5f6 <GetPinValue+0x8>
 5f6:	cd b7       	in	r28, 0x3d	; 61
 5f8:	de b7       	in	r29, 0x3e	; 62
 5fa:	8a 83       	std	Y+2, r24	; 0x02
	u8 PortLetter = PinNumber/NUM; // to get the Port letter (0 for A, 1 for B, 2 for C, 3 for D)
 5fc:	8a 81       	ldd	r24, Y+2	; 0x02
 5fe:	86 95       	lsr	r24
 600:	86 95       	lsr	r24
 602:	86 95       	lsr	r24
 604:	89 83       	std	Y+1, r24	; 0x01
	// PinNumber%NUM gives the number of the pin in the port from 0 to 7

	if (PortLetter == PortA_Letter) // 0 for port A
 606:	89 81       	ldd	r24, Y+1	; 0x01
 608:	88 23       	and	r24, r24
 60a:	a9 f4       	brne	.+42     	; 0x636 <GetPinValue+0x48>
	{
		//PINA
		return GET_BIT(PINA, PinNumber%NUM);
 60c:	e9 e3       	ldi	r30, 0x39	; 57
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	28 2f       	mov	r18, r24
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	8a 81       	ldd	r24, Y+2	; 0x02
 618:	88 2f       	mov	r24, r24
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	87 70       	andi	r24, 0x07	; 7
 61e:	90 70       	andi	r25, 0x00	; 0
 620:	a9 01       	movw	r20, r18
 622:	02 c0       	rjmp	.+4      	; 0x628 <GetPinValue+0x3a>
 624:	55 95       	asr	r21
 626:	47 95       	ror	r20
 628:	8a 95       	dec	r24
 62a:	e2 f7       	brpl	.-8      	; 0x624 <GetPinValue+0x36>
 62c:	ca 01       	movw	r24, r20
 62e:	58 2f       	mov	r21, r24
 630:	51 70       	andi	r21, 0x01	; 1
 632:	5b 83       	std	Y+3, r21	; 0x03
 634:	49 c0       	rjmp	.+146    	; 0x6c8 <GetPinValue+0xda>
	}
	else if (PortLetter == PortB_Letter) // 1 for port B
 636:	89 81       	ldd	r24, Y+1	; 0x01
 638:	81 30       	cpi	r24, 0x01	; 1
 63a:	a9 f4       	brne	.+42     	; 0x666 <GetPinValue+0x78>
	{
		//PINB
		return GET_BIT(PINB, PinNumber%NUM);
 63c:	e6 e3       	ldi	r30, 0x36	; 54
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	80 81       	ld	r24, Z
 642:	28 2f       	mov	r18, r24
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	8a 81       	ldd	r24, Y+2	; 0x02
 648:	88 2f       	mov	r24, r24
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	87 70       	andi	r24, 0x07	; 7
 64e:	90 70       	andi	r25, 0x00	; 0
 650:	a9 01       	movw	r20, r18
 652:	02 c0       	rjmp	.+4      	; 0x658 <GetPinValue+0x6a>
 654:	55 95       	asr	r21
 656:	47 95       	ror	r20
 658:	8a 95       	dec	r24
 65a:	e2 f7       	brpl	.-8      	; 0x654 <GetPinValue+0x66>
 65c:	ca 01       	movw	r24, r20
 65e:	58 2f       	mov	r21, r24
 660:	51 70       	andi	r21, 0x01	; 1
 662:	5b 83       	std	Y+3, r21	; 0x03
 664:	31 c0       	rjmp	.+98     	; 0x6c8 <GetPinValue+0xda>
	}

	else if (PortLetter == PortC_Letter) // 2 for port C
 666:	89 81       	ldd	r24, Y+1	; 0x01
 668:	82 30       	cpi	r24, 0x02	; 2
 66a:	a9 f4       	brne	.+42     	; 0x696 <GetPinValue+0xa8>
	{
		//PINC
		return GET_BIT(PINC, PinNumber%NUM);
 66c:	e3 e3       	ldi	r30, 0x33	; 51
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	80 81       	ld	r24, Z
 672:	28 2f       	mov	r18, r24
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	8a 81       	ldd	r24, Y+2	; 0x02
 678:	88 2f       	mov	r24, r24
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	87 70       	andi	r24, 0x07	; 7
 67e:	90 70       	andi	r25, 0x00	; 0
 680:	a9 01       	movw	r20, r18
 682:	02 c0       	rjmp	.+4      	; 0x688 <GetPinValue+0x9a>
 684:	55 95       	asr	r21
 686:	47 95       	ror	r20
 688:	8a 95       	dec	r24
 68a:	e2 f7       	brpl	.-8      	; 0x684 <GetPinValue+0x96>
 68c:	ca 01       	movw	r24, r20
 68e:	58 2f       	mov	r21, r24
 690:	51 70       	andi	r21, 0x01	; 1
 692:	5b 83       	std	Y+3, r21	; 0x03
 694:	19 c0       	rjmp	.+50     	; 0x6c8 <GetPinValue+0xda>
	}

	else if (PortLetter == PortD_Letter) // 3 for port D
 696:	89 81       	ldd	r24, Y+1	; 0x01
 698:	83 30       	cpi	r24, 0x03	; 3
 69a:	a9 f4       	brne	.+42     	; 0x6c6 <GetPinValue+0xd8>
	{
		//PIND
		return GET_BIT(PIND, PinNumber%NUM);
 69c:	e0 e3       	ldi	r30, 0x30	; 48
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	80 81       	ld	r24, Z
 6a2:	28 2f       	mov	r18, r24
 6a4:	30 e0       	ldi	r19, 0x00	; 0
 6a6:	8a 81       	ldd	r24, Y+2	; 0x02
 6a8:	88 2f       	mov	r24, r24
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	87 70       	andi	r24, 0x07	; 7
 6ae:	90 70       	andi	r25, 0x00	; 0
 6b0:	a9 01       	movw	r20, r18
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <GetPinValue+0xca>
 6b4:	55 95       	asr	r21
 6b6:	47 95       	ror	r20
 6b8:	8a 95       	dec	r24
 6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <GetPinValue+0xc6>
 6bc:	ca 01       	movw	r24, r20
 6be:	58 2f       	mov	r21, r24
 6c0:	51 70       	andi	r21, 0x01	; 1
 6c2:	5b 83       	std	Y+3, r21	; 0x03
 6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <GetPinValue+0xda>
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <GetPinValue+0xde>
	}
}
 6c8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ca:	8c 83       	std	Y+4, r24	; 0x04
 6cc:	8c 81       	ldd	r24, Y+4	; 0x04
 6ce:	0f 90       	pop	r0
 6d0:	0f 90       	pop	r0
 6d2:	0f 90       	pop	r0
 6d4:	0f 90       	pop	r0
 6d6:	cf 91       	pop	r28
 6d8:	df 91       	pop	r29
 6da:	08 95       	ret

000006dc <Init>:

// Declared Functions


	void Init()
	{
 6dc:	df 93       	push	r29
 6de:	cf 93       	push	r28
 6e0:	cd b7       	in	r28, 0x3d	; 61
 6e2:	de b7       	in	r29, 0x3e	; 62
		SetPinDirection(0, INPUT_PU); // A0 is pull up input
 6e4:	80 e0       	ldi	r24, 0x00	; 0
 6e6:	62 e0       	ldi	r22, 0x02	; 2
 6e8:	0e 94 49 00 	call	0x92	; 0x92 <SetPinDirection>
		SetPinDirection(8, OUTPUT); // B0 is led output pin
 6ec:	88 e0       	ldi	r24, 0x08	; 8
 6ee:	61 e0       	ldi	r22, 0x01	; 1
 6f0:	0e 94 49 00 	call	0x92	; 0x92 <SetPinDirection>
	}
 6f4:	cf 91       	pop	r28
 6f6:	df 91       	pop	r29
 6f8:	08 95       	ret

000006fa <PushButton>:

	void PushButton()
	{
 6fa:	df 93       	push	r29
 6fc:	cf 93       	push	r28
 6fe:	cd b7       	in	r28, 0x3d	; 61
 700:	de b7       	in	r29, 0x3e	; 62
		if(GET_BIT(PINA, 0)) // not pressed
 702:	e9 e3       	ldi	r30, 0x39	; 57
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	80 81       	ld	r24, Z
 708:	88 2f       	mov	r24, r24
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	81 70       	andi	r24, 0x01	; 1
 70e:	90 70       	andi	r25, 0x00	; 0
 710:	88 23       	and	r24, r24
 712:	19 f0       	breq	.+6      	; 0x71a <PushButton+0x20>
		{
			ButtonState = 0;
 714:	10 92 71 00 	sts	0x0071, r1
 718:	03 c0       	rjmp	.+6      	; 0x720 <PushButton+0x26>
		}
		else
		{
			ButtonState = 1;
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	80 93 71 00 	sts	0x0071, r24
		}
	}
 720:	cf 91       	pop	r28
 722:	df 91       	pop	r29
 724:	08 95       	ret

00000726 <LED>:

	void LED()
	{
 726:	df 93       	push	r29
 728:	cf 93       	push	r28
 72a:	cd b7       	in	r28, 0x3d	; 61
 72c:	de b7       	in	r29, 0x3e	; 62
		if(PreviousState != ButtonState)
 72e:	90 91 70 00 	lds	r25, 0x0070
 732:	80 91 71 00 	lds	r24, 0x0071
 736:	98 17       	cp	r25, r24
 738:	51 f0       	breq	.+20     	; 0x74e <LED+0x28>
		{
			SetPinValue(8, ButtonState);
 73a:	90 91 71 00 	lds	r25, 0x0071
 73e:	88 e0       	ldi	r24, 0x08	; 8
 740:	69 2f       	mov	r22, r25
 742:	0e 94 02 02 	call	0x404	; 0x404 <SetPinValue>
			PreviousState = ButtonState;
 746:	80 91 71 00 	lds	r24, 0x0071
 74a:	80 93 70 00 	sts	0x0070, r24
		}

	}
 74e:	cf 91       	pop	r28
 750:	df 91       	pop	r29
 752:	08 95       	ret

00000754 <Schedular>:
	} task;

	task Arr[] = {{Init, 0, 0}, {PushButton, 150, 0}, {LED, 150, 1000}}; //

	void Schedular()
	{
 754:	df 93       	push	r29
 756:	cf 93       	push	r28
 758:	0f 92       	push	r0
 75a:	cd b7       	in	r28, 0x3d	; 61
 75c:	de b7       	in	r29, 0x3e	; 62
		u8 i;
		for (i = 0; i<3; i++) // three tasks
 75e:	19 82       	std	Y+1, r1	; 0x01
 760:	6f c0       	rjmp	.+222    	; 0x840 <Schedular+0xec>
		{
			if(Arr[i].FirstDelay == 0)
 762:	89 81       	ldd	r24, Y+1	; 0x01
 764:	28 2f       	mov	r18, r24
 766:	30 e0       	ldi	r19, 0x00	; 0
 768:	c9 01       	movw	r24, r18
 76a:	88 0f       	add	r24, r24
 76c:	99 1f       	adc	r25, r25
 76e:	88 0f       	add	r24, r24
 770:	99 1f       	adc	r25, r25
 772:	82 0f       	add	r24, r18
 774:	93 1f       	adc	r25, r19
 776:	fc 01       	movw	r30, r24
 778:	ec 59       	subi	r30, 0x9C	; 156
 77a:	ff 4f       	sbci	r31, 0xFF	; 255
 77c:	80 81       	ld	r24, Z
 77e:	88 23       	and	r24, r24
 780:	89 f5       	brne	.+98     	; 0x7e4 <Schedular+0x90>
			{
				Arr[i].ptr();
 782:	89 81       	ldd	r24, Y+1	; 0x01
 784:	28 2f       	mov	r18, r24
 786:	30 e0       	ldi	r19, 0x00	; 0
 788:	c9 01       	movw	r24, r18
 78a:	88 0f       	add	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	88 0f       	add	r24, r24
 790:	99 1f       	adc	r25, r25
 792:	82 0f       	add	r24, r18
 794:	93 1f       	adc	r25, r19
 796:	fc 01       	movw	r30, r24
 798:	e0 5a       	subi	r30, 0xA0	; 160
 79a:	ff 4f       	sbci	r31, 0xFF	; 255
 79c:	01 90       	ld	r0, Z+
 79e:	f0 81       	ld	r31, Z
 7a0:	e0 2d       	mov	r30, r0
 7a2:	09 95       	icall
				Arr[i].FirstDelay = Arr[i].Periodicity-1;
 7a4:	89 81       	ldd	r24, Y+1	; 0x01
 7a6:	48 2f       	mov	r20, r24
 7a8:	50 e0       	ldi	r21, 0x00	; 0
 7aa:	89 81       	ldd	r24, Y+1	; 0x01
 7ac:	28 2f       	mov	r18, r24
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	c9 01       	movw	r24, r18
 7b2:	88 0f       	add	r24, r24
 7b4:	99 1f       	adc	r25, r25
 7b6:	88 0f       	add	r24, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	82 0f       	add	r24, r18
 7bc:	93 1f       	adc	r25, r19
 7be:	fc 01       	movw	r30, r24
 7c0:	ee 59       	subi	r30, 0x9E	; 158
 7c2:	ff 4f       	sbci	r31, 0xFF	; 255
 7c4:	80 81       	ld	r24, Z
 7c6:	91 81       	ldd	r25, Z+1	; 0x01
 7c8:	81 50       	subi	r24, 0x01	; 1
 7ca:	28 2f       	mov	r18, r24
 7cc:	ca 01       	movw	r24, r20
 7ce:	88 0f       	add	r24, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	88 0f       	add	r24, r24
 7d4:	99 1f       	adc	r25, r25
 7d6:	84 0f       	add	r24, r20
 7d8:	95 1f       	adc	r25, r21
 7da:	fc 01       	movw	r30, r24
 7dc:	ec 59       	subi	r30, 0x9C	; 156
 7de:	ff 4f       	sbci	r31, 0xFF	; 255
 7e0:	20 83       	st	Z, r18
 7e2:	2b c0       	rjmp	.+86     	; 0x83a <Schedular+0xe6>
			}
			else if (Arr[i].FirstDelay != -1)
 7e4:	89 81       	ldd	r24, Y+1	; 0x01
 7e6:	28 2f       	mov	r18, r24
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	c9 01       	movw	r24, r18
 7ec:	88 0f       	add	r24, r24
 7ee:	99 1f       	adc	r25, r25
 7f0:	88 0f       	add	r24, r24
 7f2:	99 1f       	adc	r25, r25
 7f4:	82 0f       	add	r24, r18
 7f6:	93 1f       	adc	r25, r19
 7f8:	fc 01       	movw	r30, r24
 7fa:	ec 59       	subi	r30, 0x9C	; 156
 7fc:	ff 4f       	sbci	r31, 0xFF	; 255
 7fe:	80 81       	ld	r24, Z
 800:	8f 3f       	cpi	r24, 0xFF	; 255
 802:	d9 f0       	breq	.+54     	; 0x83a <Schedular+0xe6>
			{
				Arr[i].FirstDelay--;
 804:	89 81       	ldd	r24, Y+1	; 0x01
 806:	28 2f       	mov	r18, r24
 808:	30 e0       	ldi	r19, 0x00	; 0
 80a:	c9 01       	movw	r24, r18
 80c:	88 0f       	add	r24, r24
 80e:	99 1f       	adc	r25, r25
 810:	88 0f       	add	r24, r24
 812:	99 1f       	adc	r25, r25
 814:	82 0f       	add	r24, r18
 816:	93 1f       	adc	r25, r19
 818:	fc 01       	movw	r30, r24
 81a:	ec 59       	subi	r30, 0x9C	; 156
 81c:	ff 4f       	sbci	r31, 0xFF	; 255
 81e:	80 81       	ld	r24, Z
 820:	48 2f       	mov	r20, r24
 822:	41 50       	subi	r20, 0x01	; 1
 824:	c9 01       	movw	r24, r18
 826:	88 0f       	add	r24, r24
 828:	99 1f       	adc	r25, r25
 82a:	88 0f       	add	r24, r24
 82c:	99 1f       	adc	r25, r25
 82e:	82 0f       	add	r24, r18
 830:	93 1f       	adc	r25, r19
 832:	fc 01       	movw	r30, r24
 834:	ec 59       	subi	r30, 0x9C	; 156
 836:	ff 4f       	sbci	r31, 0xFF	; 255
 838:	40 83       	st	Z, r20
	task Arr[] = {{Init, 0, 0}, {PushButton, 150, 0}, {LED, 150, 1000}}; //

	void Schedular()
	{
		u8 i;
		for (i = 0; i<3; i++) // three tasks
 83a:	89 81       	ldd	r24, Y+1	; 0x01
 83c:	8f 5f       	subi	r24, 0xFF	; 255
 83e:	89 83       	std	Y+1, r24	; 0x01
 840:	89 81       	ldd	r24, Y+1	; 0x01
 842:	83 30       	cpi	r24, 0x03	; 3
 844:	08 f4       	brcc	.+2      	; 0x848 <Schedular+0xf4>
 846:	8d cf       	rjmp	.-230    	; 0x762 <Schedular+0xe>
			else if (Arr[i].FirstDelay != -1)
			{
				Arr[i].FirstDelay--;
			}
		}
	}
 848:	0f 90       	pop	r0
 84a:	cf 91       	pop	r28
 84c:	df 91       	pop	r29
 84e:	08 95       	ret

00000850 <main>:




void main(void)
{
 850:	df 93       	push	r29
 852:	cf 93       	push	r28
 854:	cd b7       	in	r28, 0x3d	; 61
 856:	de b7       	in	r29, 0x3e	; 62
	// program variables


	// Module Initialization
		// Timers Initialization
			CLR_BIT(TCCR0, WGM00); // Normal wave generation mode
 858:	a3 e5       	ldi	r26, 0x53	; 83
 85a:	b0 e0       	ldi	r27, 0x00	; 0
 85c:	e3 e5       	ldi	r30, 0x53	; 83
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	80 81       	ld	r24, Z
 862:	8f 7b       	andi	r24, 0xBF	; 191
 864:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, WGM01); // Normal wave generation mode
 866:	a3 e5       	ldi	r26, 0x53	; 83
 868:	b0 e0       	ldi	r27, 0x00	; 0
 86a:	e3 e5       	ldi	r30, 0x53	; 83
 86c:	f0 e0       	ldi	r31, 0x00	; 0
 86e:	80 81       	ld	r24, Z
 870:	87 7f       	andi	r24, 0xF7	; 247
 872:	8c 93       	st	X, r24
			SET_BIT(SREG, I); // global interrupt enable
 874:	af e5       	ldi	r26, 0x5F	; 95
 876:	b0 e0       	ldi	r27, 0x00	; 0
 878:	ef e5       	ldi	r30, 0x5F	; 95
 87a:	f0 e0       	ldi	r31, 0x00	; 0
 87c:	80 81       	ld	r24, Z
 87e:	80 68       	ori	r24, 0x80	; 128
 880:	8c 93       	st	X, r24
			SET_BIT(TIMSK, TOIE0); // enable timer0 interrupt
 882:	a9 e5       	ldi	r26, 0x59	; 89
 884:	b0 e0       	ldi	r27, 0x00	; 0
 886:	e9 e5       	ldi	r30, 0x59	; 89
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	80 81       	ld	r24, Z
 88c:	81 60       	ori	r24, 0x01	; 1
 88e:	8c 93       	st	X, r24
			TCNT0 = 256-8; //
 890:	e2 e5       	ldi	r30, 0x52	; 82
 892:	f0 e0       	ldi	r31, 0x00	; 0
 894:	88 ef       	ldi	r24, 0xF8	; 248
 896:	80 83       	st	Z, r24
			SET_BIT(TCCR0, CS02); CLR_BIT(TCCR0, CS01); SET_BIT(TCCR0, CS00); // Start the timer TCCR0 = 0b00000101; prescaler 1024
 898:	a3 e5       	ldi	r26, 0x53	; 83
 89a:	b0 e0       	ldi	r27, 0x00	; 0
 89c:	e3 e5       	ldi	r30, 0x53	; 83
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	80 81       	ld	r24, Z
 8a2:	84 60       	ori	r24, 0x04	; 4
 8a4:	8c 93       	st	X, r24
 8a6:	a3 e5       	ldi	r26, 0x53	; 83
 8a8:	b0 e0       	ldi	r27, 0x00	; 0
 8aa:	e3 e5       	ldi	r30, 0x53	; 83
 8ac:	f0 e0       	ldi	r31, 0x00	; 0
 8ae:	80 81       	ld	r24, Z
 8b0:	8d 7f       	andi	r24, 0xFD	; 253
 8b2:	8c 93       	st	X, r24
 8b4:	a3 e5       	ldi	r26, 0x53	; 83
 8b6:	b0 e0       	ldi	r27, 0x00	; 0
 8b8:	e3 e5       	ldi	r30, 0x53	; 83
 8ba:	f0 e0       	ldi	r31, 0x00	; 0
 8bc:	80 81       	ld	r24, Z
 8be:	81 60       	ori	r24, 0x01	; 1
 8c0:	8c 93       	st	X, r24
 8c2:	ff cf       	rjmp	.-2      	; 0x8c2 <__stack+0x63>

000008c4 <__vector_11>:
}


// Interrupt function to be executed when an overflow takes place in timer 0 register TCNT0
ISR(__vector_11) // Timer/Counter0 Overflow vector no. (12) - 1
{
 8c4:	1f 92       	push	r1
 8c6:	0f 92       	push	r0
 8c8:	0f b6       	in	r0, 0x3f	; 63
 8ca:	0f 92       	push	r0
 8cc:	11 24       	eor	r1, r1
 8ce:	2f 93       	push	r18
 8d0:	3f 93       	push	r19
 8d2:	4f 93       	push	r20
 8d4:	5f 93       	push	r21
 8d6:	6f 93       	push	r22
 8d8:	7f 93       	push	r23
 8da:	8f 93       	push	r24
 8dc:	9f 93       	push	r25
 8de:	af 93       	push	r26
 8e0:	bf 93       	push	r27
 8e2:	ef 93       	push	r30
 8e4:	ff 93       	push	r31
 8e6:	df 93       	push	r29
 8e8:	cf 93       	push	r28
 8ea:	cd b7       	in	r28, 0x3d	; 61
 8ec:	de b7       	in	r29, 0x3e	; 62

TCNT0 = 256-8;
 8ee:	e2 e5       	ldi	r30, 0x52	; 82
 8f0:	f0 e0       	ldi	r31, 0x00	; 0
 8f2:	88 ef       	ldi	r24, 0xF8	; 248
 8f4:	80 83       	st	Z, r24
Schedular();
 8f6:	0e 94 aa 03 	call	0x754	; 0x754 <Schedular>

	// flag resets automatically
}
 8fa:	cf 91       	pop	r28
 8fc:	df 91       	pop	r29
 8fe:	ff 91       	pop	r31
 900:	ef 91       	pop	r30
 902:	bf 91       	pop	r27
 904:	af 91       	pop	r26
 906:	9f 91       	pop	r25
 908:	8f 91       	pop	r24
 90a:	7f 91       	pop	r23
 90c:	6f 91       	pop	r22
 90e:	5f 91       	pop	r21
 910:	4f 91       	pop	r20
 912:	3f 91       	pop	r19
 914:	2f 91       	pop	r18
 916:	0f 90       	pop	r0
 918:	0f be       	out	0x3f, r0	; 63
 91a:	0f 90       	pop	r0
 91c:	1f 90       	pop	r1
 91e:	18 95       	reti

00000920 <_exit>:
 920:	f8 94       	cli

00000922 <__stop_program>:
 922:	ff cf       	rjmp	.-2      	; 0x922 <__stop_program>
